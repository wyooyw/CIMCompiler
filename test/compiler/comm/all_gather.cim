def send(rank<index>, step<index>, world_size<index>, data< <-1, -1>, int32, __GLOBAL__>){
    rank_to_send = (rank + 1) % world_size;
    idx_to_send = (rank - step + world_size) % world_size;
    data_to_send = data[idx_to_send, :];
    fake_idx_to_recv = (rank_to_send - step - 1 + world_size) % world_size;
    fake_data_to_recv = data[fake_idx_to_recv, :];
    Send(data_to_send, fake_data_to_recv, rank_to_send, step);
}

def recv(rank<index>, step<index>, world_size<index>, data< <-1, -1>, int32, __GLOBAL__>){
    rank_to_recv = (rank - 1 + world_size) % world_size;
    idx_to_recv = (rank - step - 1 + world_size) % world_size;
    data_to_recv = data[idx_to_recv , :];
    fake_idx_to_send = (rank_to_recv - step + world_size) % world_size;
    fake_data_to_send = data[fake_idx_to_send, :];
    Recv(fake_data_to_send, data_to_recv, rank_to_recv, step);
}

def all_gather(
    data< <{{world_size}}, -1>, int32, __GLOBAL__>
    ){
    rank = {{core_id}};
    world_size = {{world_size}};
    
    step_max = world_size - 1;
    for step in range(0, step_max) carry (){
        {% if core_id % 2 == 0 %}
            send(rank, step, world_size, data);
            recv(rank, step, world_size, data);
        {% else %}
            recv(rank, step, world_size, data);
            send(rank, step, world_size, data);
        {% endif %}
    };
}

def main(){
    input = Buffer(<{{data_size}}>, int32, __GLOBAL__);
    ag_buffer = Buffer(<{{world_size}}, {{data_size}}>, int32, __GLOBAL__);
    Trans(input, ag_buffer[{{core_id}}, :]);
    all_gather(ag_buffer);
}