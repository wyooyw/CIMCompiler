#define INPUT_BIT_WIDTH 0
#define OUTPUT_BIT_WIDTH 1
#define WEIGHT_BIT_WIDTH 2
#define GROUP_SIZE 3
#define ACTIVATION_GROUP_NUM 4
#define ACTIVATION_ELEMENT_COL_NUM 5
#define GROUP_INPUT_STEP 6
#define GROUP_INPUT_OFFSET_ADDR 6
#define VALUE_SPARSE_MASK_ADDR 7
#define BIT_SPARSE_META_ADDR 8

#define SIMD_INPUT_1_BIT_WIDTH 16
#define SIMD_INPUT_2_BIT_WIDTH 17
#define SIMD_INPUT_3_BIT_WIDTH 18
#define SIMD_INPUT_4_BIT_WIDTH 19
#define SIMD_OUTPUT_BIT_WIDTH 20

def main(null<int8>){
    // input and weight will be prepared in memory image
    input = Buffer(<4>, int8, global);
    weight = Buffer(<4,8>, int8, global);
    output = Buffer(<8>, int32, global);

    pim_in_buffer = Buffer(<4>, int8, input_buffer);
    pim_out_buffer = Buffer(<8>, int32, output_buffer);
    macros = Buffer(<4, 4, 1, 8>, int8, macro);

    // move input and weight
    Trans(input, pim_in_buffer);
    macro_row0 = Slice(macros, [0,0,0,0],[1,4,1,8],[1,1,1,1]);
    Trans(weight, macro_row0);

    // compute
    SpecialRegSet(INPUT_BIT_WIDTH, 8);
    SpecialRegSet(WEIGHT_BIT_WIDTH, 8);
    SpecialRegSet(OUTPUT_BIT_WIDTH, 32);
    SpecialRegSet(GROUP_SIZE, 4);
    SpecialRegSet(ACTIVATION_GROUP_NUM, 1);
    SpecialRegSet(ACTIVATION_ELEMENT_COL_NUM, 8);
    CIMComputeValueSparse(pim_in_buffer, macro_row0, pim_out_buffer);

    //write output
    Trans(pim_out_buffer, output);
}