#define SPECIAL_REG_INPUT_BIT_WIDTH 0
#define SPECIAL_REG_OUTPUT_BIT_WIDTH 1
#define SPECIAL_REG_WEIGHT_BIT_WIDTH 2
#define SPECIAL_REG_GROUP_SIZE 3
#define SPECIAL_REG_ACTIVATION_GROUP_NUM 4
#define SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM 5
#define SPECIAL_REG_GROUP_INPUT_STEP 6
#define SPECIAL_REG_GROUP_INPUT_OFFSET_ADDR 6
#define SPECIAL_REG_VALUE_SPARSE_MASK_ADDR 7
#define SPECIAL_REG_BIT_SPARSE_META_ADDR 8

#define SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH 16
#define SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH 17
#define SPECIAL_REG_SIMD_INPUT_3_BIT_WIDTH 18
#define SPECIAL_REG_SIMD_INPUT_4_BIT_WIDTH 19
#define SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH 20

// input
#define INPUT_ROW {{ INPUT_ROW }}
#define INPUT_COL {{ INPUT_COL }}
#define INPUT_CHANNEL {{ INPUT_CHANNEL }}

#define OUTPUT_ROW {{ OUTPUT_ROW }}
#define OUTPUT_COL {{ OUTPUT_COL }}
#define OUTPUT_CHANNEL {{ OUTPUT_CHANNEL }}

#define KERNEL_SIZE {{ KERNEL_SIZE }}
#define PADDING {{ PADDING }}
#define STRIDE {{ STRIDE }}

#define N_MACRO_PER_GROUP {{ N_MACRO_PER_GROUP }}
#define N_MACRO {{ N_MACRO }}
#define N_VCOL {{ N_VCOL }}
#define N_GROUP_VCOL {{ N_GROUP_VCOL }}
#define N_GROUP {{ N_GROUP }}
#define N_ROW {{ N_ROW }}
#define N_COMP {{ N_COMP }}
#define N_MACRO_REDUCE {{ N_MACRO_REDUCE }} // N_ROW * N_COMP = 64 * 16 = 1024;

#define INPUT_BUFFER_SIZE_PER_GROUP {{ INPUT_BUFFER_SIZE_PER_GROUP }}

#define OUT_SPATIAL_TILE {{ OUT_SPATIAL_TILE }}
#define OUT_REDUCE_TILE {{ OUT_REDUCE_TILE }}

def quantify(
    null<int8>,
    out_channel_begin<index>,
    out_channel_len<index>,
    local_output_i32< <OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int32, __OUTPUT_MEMORY__>,
    local_bias_scale< <OUTPUT_CHANNEL, 2>, int32, __INPUT_MEMORY__>,
    local_output_i8< <OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int8, __OUTPUT_MEMORY__>,
    local_out_zp< <1>, int32, __INPUT_MEMORY__>
    ){
    // Do quantify here
    for oh in range(0,OUTPUT_ROW) carry(null){
        for ow in range(0,OUTPUT_COL) carry(null){
            use_i32_output = Slice(local_output_i32,
                [oh,ow,out_channel_begin],
                [1,1,out_channel_len],
                [1,1,1]
            );
            use_bias_scale = Slice(local_bias_scale,
                [out_channel_begin, 0],
                [out_channel_len, 2],
                [1, 1]
            );
            use_i8_output = Slice(local_output_i8,
                [oh,ow,out_channel_begin],
                [1,1,out_channel_len],
                [1,1,1]
            );
            Quantify(use_i32_output, use_bias_scale, local_out_zp, use_i8_output, {{RELU}});
        };
    };
}

def main(null<int8>){
    // input, weight, mask and index will be prepared in memory image
    global_input = Buffer(<NPUT_CHANNEL, INPUT_ROW, INPUT_COL>, int8, __GLOBAL__);
    global_weight = Buffer(<OUT_SPATIAL_TILE, OUT_REDUCE_TILE, N_COMP, N_GROUP, N_GROUP_VCOL>, int8, __GLOBAL__);
    
    // prepare quantify buffers
    global_bias_scale = Buffer(<OUTPUT_CHANNEL, 2>, int32, __GLOBAL__);
    global_out_zp = Buffer(<1>, int32, __GLOBAL__);
    local_bias_scale = Buffer(<OUTPUT_CHANNEL, 2>, int32, __INPUT_MEMORY__);
    local_out_zp = Buffer(<1>, int32, __INPUT_MEMORY__);
    local_output_i8 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int8, __OUTPUT_MEMORY__);
    Trans(global_bias_scale, local_bias_scale);
    Trans(global_out_zp, local_out_zp);

    //global_output_i32 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int32, __GLOBAL__);
    global_output_i8 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int8, __GLOBAL__);
    
    // Copy input and index into local memory
    // dwconv use [I,H,W] axis order
    local_input = Buffer(<INPUT_CHANNEL, INPUT_ROW, INPUT_COL>, int8, __INPUT_MEMORY__);
    Trans(global_input, local_input);

    // Prepare memory's that will be used
    
    // Create a buffer to store output
    local_output = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int32, __OUTPUT_MEMORY__);
    local_output_for_temp_sum = Buffer(<N_GROUP_VCOL>, int32, __OUTPUT_MEMORY__);
    
    // PIM input reg buffer, it is a double-buffer. Each group use 128 byte, total 4 groups.
    pim_input_reg_buffer = Buffer(<2,N_GROUP,INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__);

    // PIM output reg buffer, it's capacity is 4096 bytes, but we use it to store int32 data, so the buffer's shape is 1024
    pim_output_reg_buffer = Buffer(<1024>, int32, __PIM_OUTPUT_REG_BUFFER__);
    
    // Macros
    macros = Buffer(<N_ROW, N_COMP, N_GROUP, N_GROUP_VCOL>, int8, __MACRO__);

    // Spill
    local_spill = Buffer(<4>, index, __INPUT_MEMORY__);

    // TODO: Add 'SPECIAL_REG_' prefix for these macro.
    SpecialRegSet(SPECIAL_REG_INPUT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_WEIGHT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_OUTPUT_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_GROUP_SIZE, N_MACRO_PER_GROUP);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_GROUP_NUM, N_GROUP);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM, N_GROUP_VCOL);
    SpecialRegSet(SPECIAL_REG_GROUP_INPUT_STEP, INPUT_BUFFER_SIZE_PER_GROUP);

    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 32);

    // out_channel_outer_tile_size = OUTPUT_CHANNEL/N_GROUP_VCOL;
    for out_channel_begin in range(0, OUTPUT_CHANNEL, N_GROUP_VCOL) carry (null) {
        out_channel_end = Min(out_channel_begin + N_GROUP_VCOL, OUTPUT_CHANNEL);
        out_channel_len = out_channel_end - out_channel_begin;
        out_tile_i = out_channel_begin / N_GROUP_VCOL;

        inner_reduce_tile_size = N_ROW;
        for out_reduce_begin in range(0, OUT_REDUCE_TILE, inner_reduce_tile_size) carry (null){

            out_reduce_end = Min(out_reduce_begin + inner_reduce_tile_size, OUT_REDUCE_TILE);
            out_reduce_len = out_reduce_end - out_reduce_begin;

            // Step 1: Prepare weight
            // notice that weight.shape = <TIME, N_TO, N_GROUP, N_MACRO_PER_GROUP, N_VCOL>
            use_weight = Slice(global_weight,
                        [out_tile_i, out_reduce_begin, 0, 0, 0],              // offsets
                        [1, out_reduce_len, N_COMP, N_GROUP, N_GROUP_VCOL],   // sizes
                        [1,1,1,1,1]                                           // strides
                        );
            use_macros = Slice(macros,
                [0, 0, 0, 0],
                [out_reduce_len, N_COMP, N_GROUP, N_GROUP_VCOL],
                [1,1,1,1]
            );
            Trans(use_weight, use_macros);

            // Iter over output's height and width
            // Notice that we have 4 group, so each time we deal with 4 pixel in a square.
            // So, the 'step' of oh and ow is 2.
            double_buffer_id = 1;
            Save(local_spill, [0], double_buffer_id);
            for oh in range(0,OUTPUT_ROW,2) carry(null) {
                for ow in range(0,OUTPUT_COL,2) carry(null) {
                    // Double buffer index
                    double_buffer_id = Load(local_spill, [0]);
                    double_buffer_id = 1 - double_buffer_id;
                    Save(local_spill, [0], double_buffer_id);

                    // Step 3: Prepare input
                    use_input_buffer = Slice(pim_input_reg_buffer, 
                        [double_buffer_id, 0, 0], 
                        [1, N_GROUP, INPUT_BUFFER_SIZE_PER_GROUP], 
                        [1,1,1]
                    );

                    for g in range(N_GROUP) carry(null){
                        delta_h = g / 2;
                        delta_w = g % 2;
                        for ker_row in range(KERNEL_SIZE) carry(null){
                            delta_h = delta_h + ker_row;
                            use_local_input = Slice(local_input, 
                                [0, oh + delta_h, ow + delta_w],
                                [1, 1, KERNEL_SIZE]
                            );
                            group_use_input_buffer = Slice(use_input_buffer,
                                [0, g, ker_row * KERNEL_SIZE],
                                [1, 1, KERNEL_SIZE],
                                [1, 1, 1]
                            );
                            Trans(use_local_input, group_use_input_buffer);
                        };
                    };

                    // Step 4: compute
                    input_len = KERNEL_SIZE * KERNEL_SIZE;
                    // activate macro
                    activate_macro = Slice(use_macros,
                        [0, 0, 0, 0],
                        [1,  N_COMP, N_GROUP, N_GROUP_VCOL],
                        [1,1,1,1]
                    );
                    // this is an uncontinous subview!!!
                    compute_use_input_buffer = Slice(use_input_buffer,
                        [0, 0, 0],
                        [1, N_GROUP, input_len],
                        [1, 1, 1]
                    );
                    CIMComputeDense(compute_use_input_buffer, activate_macro, pim_output_reg_buffer);
                    

                    CIMOutput(N_GROUP_VCOL, 0, pim_output_reg_buffer);

                    // TODO: unroll this loop
                    for group_i in range(4) carry (null){
                        output_buffer_group_i = Slice(pim_output_reg_buffer, [group_i * N_GROUP_VCOL], [1], [1]);
                        delta_h = group_i / 2;
                        delta_w = group_i % 2;
                        local_output_group_i = Slice(local_output, [oh+delta_h, ow+delta_w, out_channel_begin], [1, 1, 1], [1,1,1]);
                        Trans(output_buffer_group_i, local_output_group_i);
                    };
                };
            };
        };

        // Do quantify here
        quantify(null,
            out_channel_begin,
            out_channel_len,
            local_output,
            local_bias_scale,
            local_output_i8,
            local_out_zp
        );
    };
    Trans(local_output_i8, global_output_i8);
}