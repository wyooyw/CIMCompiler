#define SPECIAL_REG_INPUT_BIT_WIDTH 0
#define SPECIAL_REG_OUTPUT_BIT_WIDTH 1
#define SPECIAL_REG_WEIGHT_BIT_WIDTH 2
#define SPECIAL_REG_GROUP_SIZE 3
#define SPECIAL_REG_ACTIVATION_GROUP_NUM 4
#define SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM 5
#define SPECIAL_REG_GROUP_INPUT_STEP 6
#define SPECIAL_REG_GROUP_INPUT_OFFSET_ADDR 6
#define SPECIAL_REG_VALUE_SPARSE_MASK_ADDR 7
#define SPECIAL_REG_BIT_SPARSE_META_ADDR 8

#define SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH 16
#define SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH 17
#define SPECIAL_REG_SIMD_INPUT_3_BIT_WIDTH 18
#define SPECIAL_REG_SIMD_INPUT_4_BIT_WIDTH 19
#define SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH 20

#define SPECIAL_REG_SIMD_EXTRA_INPUT_ADDR_1 21
#define SPECIAL_REG_SIMD_EXTRA_INPUT_ADDR_2 22

// input
#define INPUT_ROW 10
#define INPUT_COL 10
#define INPUT_CHANNEL 128

#define OUTPUT_ROW 8
#define OUTPUT_COL 8
#define OUTPUT_CHANNEL 128

#define KERNEL_SIZE 3
#define PADDING 0
#define STRIDE 1

#define N_MACRO_PER_GROUP 8
#define N_MACRO 32
#define N_VCOL 2
#define N_GROUP_VCOL 16
#define N_GROUP 4
#define N_ROW 16
#define N_COMP 16
#define N_MACRO_REDUCE 256 // N_ROW * N_COMP = 64 * 16 = 1024;

#define INPUT_BUFFER_SIZE_PER_GROUP 128

#define WINDOW_SIZE 3

def main(null<int8>){
    // input, weight, mask and index will be prepared in memory image
    global_input = Buffer(<8, 30, INPUT_CHANNEL>, int8, __GLOBAL__);
    global_weight = Buffer(<KERNEL_SIZE, KERNEL_SIZE, OUTPUT_CHANNEL>, int8, __GLOBAL__);

    // local weight
    local_weight = Buffer(<KERNEL_SIZE, KERNEL_SIZE, OUTPUT_CHANNEL>, int8, __INPUT_MEMORY__);
    Trans(global_weight, local_weight);

    //global_pimset_mask = Buffer(<N_GROUP_VCOL>, int1, __GLOBAL__);
    //local_pimset_mask = Buffer(<N_GROUP_VCOL>, int1, __INPUT_MEMORY__);
    //Trans(global_pimset_mask, local_pimset_mask);

    // prepare quantify buffers
    global_bias_scale = Buffer(<OUTPUT_CHANNEL, 2>, int32, __GLOBAL__);
    global_out_zp = Buffer(<1>, int32, __GLOBAL__);
    local_bias_scale = Buffer(<OUTPUT_CHANNEL, 2>, int32, __INPUT_MEMORY__);
    local_out_zp = Buffer(<1>, int32, __INPUT_MEMORY__);
    Trans(global_bias_scale, local_bias_scale);
    Trans(global_out_zp, local_out_zp);

    //global_output_i32 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int32, __GLOBAL__);
    global_output_i8 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int8, __GLOBAL__);
    local_output_i8 = Buffer(<OUTPUT_CHANNEL>, int8, __OUTPUT_MEMORY__);
    local_simd_mul_output_i32 = Buffer(<OUTPUT_CHANNEL>, int32, __OUTPUT_MEMORY__);
    local_output_parial_sum_i32 = Buffer(<OUTPUT_CHANNEL>, int32, __OUTPUT_MEMORY__);

    // blank
    local_blank_i32 = Buffer(<OUTPUT_CHANNEL>, int32, __OUTPUT_MEMORY__);
   // local_blank_i8 = Buffer(<OUTPUT_CHANNEL>, int8, __OUTPUT_MEMORY__);
    
    // Copy input and index into local memory
    // dwconv use [I,H,W] axis order
    local_input = Buffer(<30, INPUT_CHANNEL>, int8, __INPUT_MEMORY__);

    // Spill
    local_spill = Buffer(<4>, index, __INDEX_MEMORY__);

    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 64);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_3_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 8);

    for ow in range(0, OUTPUT_COL) carry (null) {

        use_global_input = Slice(global_input, 
            [ow, 0, 0], [1, 30, INPUT_CHANNEL], [1,1,1]
        );
        Trans(use_global_input, local_input);

        use_bias_scale_addr = Addr(local_bias_scale);
        SpecialRegSet(SPECIAL_REG_SIMD_EXTRA_INPUT_ADDR_1, use_bias_scale_addr);

        for oh in range(0, OUTPUT_ROW) carry (null) {
            for kh in range(0, KERNEL_SIZE) carry (null) {
                for kw in range(0, KERNEL_SIZE) carry (null) {

                    // weight
                    use_weight = Slice(local_weight,
                        [kh, kw, 0], [1,1,OUTPUT_CHANNEL], [1,1,1]
                    );

                    // input
                    index_1 = oh * 3;
                    index_2 = kh * 3;
                    index_3 = index_1 + index_2;
                    index_4 = index_3 + kw;
                    Print(index_4);
                    use_input = Slice(local_input,
                       [index_4, 0], [1, INPUT_CHANNEL], [1,1]
                    );
                    
                    // output
                    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 8);
                    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 8);
                    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 32);
                    VVMul(use_input, use_weight, local_simd_mul_output_i32);

                    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 32);
                    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 32);
                    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 32);
                    VVAdd(local_output_parial_sum_i32, local_simd_mul_output_i32, local_output_parial_sum_i32);
                };
            };

            // quantify
            SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 32);
            SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 64);
            SpecialRegSet(SPECIAL_REG_SIMD_INPUT_3_BIT_WIDTH, 8);
            SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 8);
            Quantify(local_output_parial_sum_i32, local_out_zp, local_output_i8, 0);

            // clear
            Trans(local_blank_i32, local_output_parial_sum_i32);
            
            // move to global memory
            use_global_output = Slice(global_output_i8,
                [oh, ow, 0], [1,1,OUTPUT_CHANNEL], [1,1,1]
            );
            Trans(local_output_i8, use_global_output);
        };
    };
}