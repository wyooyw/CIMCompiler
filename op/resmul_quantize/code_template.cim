{% include 'op/common/def_special_regs.cim' %}
{% include 'op/common/simd.cim' %}

// input
#define INPUT_ROW {{ INPUT_ROW }}
#define INPUT_COL {{ INPUT_COL }}
#define INPUT_CHANNEL {{ INPUT_CHANNEL }}

def main(){
    // input, weight, mask and index will be prepared in memory image
    global_input1 = Buffer(<{{INPUT_ROW}}, {{INPUT_COL}}, {{INPUT_CHANNEL}}>, int8, __GLOBAL__);
    global_input2 = Buffer(<{{INPUT_CHANNEL}}>, int8, __GLOBAL__);
    local_input1 = Buffer(<{{INPUT_ROW}}, {{INPUT_COL}}, {{INPUT_CHANNEL}}>, int8, __INPUT_MEMORY__);
    local_input2 = Buffer(<{{INPUT_CHANNEL}}>, int8, __INPUT_MEMORY__);
    Trans(global_input1, local_input1);
    Trans(global_input2, local_input2);

    // prepare quantify buffers
    global_bias_scale = Buffer(<2>, int32, __GLOBAL__);
    global_out_zp = Buffer(<1>, int32, __GLOBAL__);
    local_bias_scale = Buffer(<2>, int32, __INPUT_MEMORY__);
    local_out_zp = Buffer(<1>, int32, __INPUT_MEMORY__);
    Trans(global_bias_scale, local_bias_scale);
    Trans(global_out_zp, local_out_zp);

    global_output_i8 = Buffer(<{{INPUT_ROW}}, {{INPUT_COL}}, {{INPUT_CHANNEL}}>, int8, __GLOBAL__);
    local_output_i8 = Buffer(<{{INPUT_CHANNEL}}>, int8, __OUTPUT_MEMORY__);


    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_3_BIT_WIDTH, 64);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_4_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 8);

    for oh in range(0, INPUT_ROW) carry () {
        for ow in range(0, INPUT_COL) carry () {

            use_local_input1 = Slice(local_input1, [oh, ow, 0], [1,1,INPUT_CHANNEL], [1,1,1]);

            // res-mul-quantify            
            SIMD(RESMUL_QUANTIZE, 
                use_local_input1, 
                local_input2, 
                local_bias_scale, 
                local_out_zp, 
                local_output_i8
            );

            // move to global memory
            use_global_output = Slice(global_output_i8,
                [oh, ow, 0], [1,1,INPUT_CHANNEL], [1,1,1]
            );
            Trans(local_output_i8, use_global_output);
        };
    };
}