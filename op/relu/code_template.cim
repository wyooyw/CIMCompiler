{% include 'lib/def_special_regs.cim' %}
{% include 'lib/simd.cim' %}
// input
#define INPUT_ROW {{ INPUT_ROW }}
#define INPUT_COL {{ INPUT_COL }}
#define INPUT_CHANNEL {{ INPUT_CHANNEL }}

def main(){
    global_input = Buffer(<INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __GLOBAL__);
    global_output = Buffer(<INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __GLOBAL__);

    local_input = Buffer(<INPUT_CHANNEL>, int8, __INPUT_MEMORY__);
    local_output = Buffer(<INPUT_CHANNEL>, int8, __OUTPUT_MEMORY__);
    local_zeros = Buffer(<INPUT_CHANNEL>, int8, __INPUT_MEMORY__);

    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 8);

    for ih in range(INPUT_ROW) carry () {
        for iw in range(INPUT_COL) carry () {
            // do max pooling
            use_global_input = global_input[ih:ih + 1, iw:iw + 1, 0:INPUT_CHANNEL];
            Trans(use_global_input, local_input);

            SIMD(VVMAX, local_input, local_zeros, local_output);

            // move to global memory
            use_global_output = global_output[ih:ih + 1, iw:iw + 1, 0:INPUT_CHANNEL];
            Trans(local_output, use_global_output);
        };
    };
}