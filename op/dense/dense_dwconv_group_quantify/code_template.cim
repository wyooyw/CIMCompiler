{% include 'lib/def_special_regs.cim' %}

// input
#define INPUT_ROW {{ INPUT_ROW }}
#define INPUT_COL {{ INPUT_COL }}
#define INPUT_CHANNEL {{ INPUT_CHANNEL }}

#define OUTPUT_ROW {{ OUTPUT_ROW }}
#define OUTPUT_COL {{ OUTPUT_COL }}
#define OUTPUT_CHANNEL {{ OUTPUT_CHANNEL }}

#define KERNEL_SIZE {{ KERNEL_SIZE }}
#define PADDING {{ PADDING }}
#define STRIDE {{ STRIDE }}

#define N_MACRO_PER_GROUP {{ N_MACRO_PER_GROUP }}
#define N_MACRO {{ N_MACRO }}
#define N_VCOL {{ N_VCOL }}
#define N_GROUP_VCOL {{ N_GROUP_VCOL }}
#define N_GROUP {{ N_GROUP }}
#define N_ROW {{ N_ROW }}
#define N_COMP {{ N_COMP }}
#define N_MACRO_REDUCE {{ N_MACRO_REDUCE }} // N_ROW * N_COMP = 64 * 16 = 1024;

#define INPUT_BUFFER_SIZE_PER_GROUP {{ INPUT_BUFFER_SIZE_PER_GROUP }}

#define WINDOW_SIZE {{WINDOW_SIZE}}

{% if IM2COL %}
    {% include 'lib/input_loader_im2col_dw.cim' %}
{% else %}
    {% include 'lib/input_loader_dw.cim' %}
{% endif %}


def main(){
    // input, weight, mask and index will be prepared in memory image
    {% if IM2COL %}
        global_input = Buffer(<INPUT_CHANNEL, {{IM2COL_SIZE_0}}, {{IM2COL_SIZE_1}}>, int8, __GLOBAL__);
    {% else %}
        global_input = Buffer(<INPUT_CHANNEL, INPUT_ROW, INPUT_COL>, int8, __GLOBAL__);
    {% endif %}
    global_weight = Buffer(<OUTPUT_CHANNEL, WINDOW_SIZE, N_GROUP, N_GROUP_VCOL>, int8, __GLOBAL__);

    global_pimset_mask = Buffer(<N_GROUP_VCOL>, int1, __GLOBAL__);
    local_pimset_mask = Buffer(<N_GROUP_VCOL>, int1, __INPUT_MEMORY__);
    Trans(global_pimset_mask, local_pimset_mask);
    
    
    // prepare quantify buffers
    global_bias_scale = Buffer(<OUTPUT_CHANNEL, 2>, int32, __GLOBAL__);
    global_out_zp = Buffer(<1>, int32, __GLOBAL__);
    local_bias_scale = Buffer(<OUTPUT_CHANNEL, 2>, int32, __INPUT_MEMORY__);
    local_out_zp = Buffer(<1>, int32, __INPUT_MEMORY__);
    local_output_i8 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int8, __OUTPUT_MEMORY__);
    Trans(global_bias_scale, local_bias_scale);
    Trans(global_out_zp, local_out_zp);

    //global_output_i32 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int32, __GLOBAL__);
    global_output_i8 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int8, __GLOBAL__);
    local_output_i8 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int8, __OUTPUT_MEMORY__);
    local_output_temp = Buffer(<N_GROUP>, int32, __OUTPUT_MEMORY__);
    
    // Copy input and index into local memory
    // dwconv use [I,H,W] axis order
    {% if IM2COL %}
        local_input = Buffer(<1, {{IM2COL_SIZE_0}}, {{IM2COL_SIZE_1}}>, int8, __INPUT_MEMORY__);
    {% else %}
        local_input = Buffer(<1, INPUT_ROW, INPUT_COL>, int8, __INPUT_MEMORY__);
    {% endif %}

    // PIM input reg buffer, it is a double-buffer. Each group use 128 byte, total 4 groups.
    pim_input_reg_buffer = Buffer(<2,N_GROUP,INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__);

    // PIM output reg buffer, it's capacity is 4096 bytes, but we use it to store int32 data, so the buffer's shape is 1024
    pim_output_reg_buffer = Buffer(<1024>, int32, __PIM_OUTPUT_REG_BUFFER__);
    
    // Macros
    macros = Buffer(<N_ROW, N_COMP, N_GROUP, N_GROUP_VCOL>, int8, __MACRO__);

    // Spill
    local_spill = Buffer(<4>, index, __INDEX_MEMORY__);

    // TODO: Add 'SPECIAL_REG_' prefix for these macro.
    SpecialRegSet(SPECIAL_REG_INPUT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_WEIGHT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_OUTPUT_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_GROUP_SIZE, N_MACRO_PER_GROUP);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_GROUP_NUM, N_GROUP);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM, N_GROUP_VCOL);
    SpecialRegSet(SPECIAL_REG_GROUP_INPUT_STEP, INPUT_BUFFER_SIZE_PER_GROUP);

    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 64);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_3_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 8);

    CIMSet(local_pimset_mask); // this should after set SPECIAL_REG_WEIGHT_BIT_WIDTH

    for out_channel_begin in range(0, OUTPUT_CHANNEL) carry () {

        {% if IM2COL %}
            use_global_input = Slice(global_input, 
                [out_channel_begin, 0, 0], [1, {{IM2COL_SIZE_0}}, {{IM2COL_SIZE_1}}], [1,1,1]
            );
        {% else %}
            use_global_input = Slice(global_input, 
                [out_channel_begin, 0, 0], [1, INPUT_ROW, INPUT_COL], [1,1,1]
            );
        {% endif %}
        Trans(use_global_input, local_input);

        use_bias_scale = Slice(local_bias_scale,
            [out_channel_begin, 0],
            [1, 2],
            [1, 1]
        );
        use_bias_scale_addr = Addr(use_bias_scale);
        SpecialRegSet(SPECIAL_REG_SIMD_EXTRA_INPUT_ADDR_1, use_bias_scale_addr);

        // Step 1: Prepare weight
        use_weight = Slice(global_weight,
                    [out_channel_begin, 0, 0, 0],              // offsets
                    [1, WINDOW_SIZE, N_GROUP, N_GROUP_VCOL],   // sizes
                    [1,1,1,1]                                           // strides
                    );
        use_macros = Slice(macros,
            [0, 0, 0, 0],
            [1, WINDOW_SIZE, N_GROUP, N_GROUP_VCOL],
            [1,1,1,1]
        );
        Trans(use_weight, use_macros);

        // Iter over output's height and width
        // Notice that we have 4 group, so each time we deal with 4 pixel in a square.
        // So, the 'step' of oh and ow is 2.
        double_buffer_id = 1;
        for oh in range(0,OUTPUT_ROW,2) carry(double_buffer_id) {
            for ow in range(0,OUTPUT_COL,2) carry(double_buffer_id) {
                // Double buffer index
                double_buffer_id = 1 - double_buffer_id;

                // Step 3: Prepare input
                use_input_buffer = Slice(pim_input_reg_buffer, 
                    [double_buffer_id, 0, 0], 
                    [1, N_GROUP, INPUT_BUFFER_SIZE_PER_GROUP], 
                    [1,1,1]
                );
                copy_input_to_input_buffer_dw(
                    local_input,
                    use_input_buffer,
                    oh,
                    ow,
                    out_channel_begin
                );

                // Step 4: compute
                activate_macro = Slice(use_macros,
                    [0, 0, 0, 0],
                    [1,  N_COMP, N_GROUP, N_GROUP_VCOL],
                    [1,1,1,1]
                );
                // this is an uncontinous subview!!!
                compute_use_input_buffer = Slice(use_input_buffer,
                    [0, 0, 0],
                    [1, N_GROUP, WINDOW_SIZE],
                    [1, 1, 1]
                );
                CIMComputeDense(compute_use_input_buffer, activate_macro);
                

                CIMOutput(N_GROUP_VCOL, 0, pim_output_reg_buffer);

                // TODO: unroll this loop
                for group_i in range(4) carry (){
                    output_buffer_group_i = Slice(pim_output_reg_buffer, [group_i * N_GROUP_VCOL], [1], [1]);
                    delta_h = group_i / 2;
                    delta_w = group_i % 2;
                    local_output_temp_i = Slice(local_output_temp, [group_i], [1], [1]);
                    //local_output_group_i = Slice(local_output, [oh+delta_h, ow+delta_w, out_channel_begin], [1, 1, 1], [1,1,1]);
                    Trans(output_buffer_group_i, local_output_temp_i);

                    use_i8_output = Slice(local_output_i8,
                        [oh+delta_h,ow+delta_w,out_channel_begin],
                        [1,1,1],
                        [1,1,1]
                    );
                    Quantify(local_output_temp_i, local_out_zp, use_i8_output, {{RELU}});
                };
            };
        };
    };
    Trans(local_output_i8, global_output_i8);
}