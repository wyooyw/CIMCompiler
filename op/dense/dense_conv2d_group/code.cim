#define SPECIAL_REG_INPUT_BIT_WIDTH 0
#define SPECIAL_REG_OUTPUT_BIT_WIDTH 1
#define SPECIAL_REG_WEIGHT_BIT_WIDTH 2
#define SPECIAL_REG_GROUP_SIZE 3
#define SPECIAL_REG_ACTIVATION_GROUP_NUM 4
#define SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM 5
#define SPECIAL_REG_GROUP_INPUT_STEP 6
#define SPECIAL_REG_GROUP_INPUT_OFFSET_ADDR 6
#define SPECIAL_REG_VALUE_SPARSE_MASK_ADDR 7
#define SPECIAL_REG_BIT_SPARSE_META_ADDR 8

#define SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH 16
#define SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH 17
#define SPECIAL_REG_SIMD_INPUT_3_BIT_WIDTH 18
#define SPECIAL_REG_SIMD_INPUT_4_BIT_WIDTH 19
#define SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH 20

#define SPECIAL_REG_SIMD_EXTRA_INPUT_ADDR_1 21
#define SPECIAL_REG_SIMD_EXTRA_INPUT_ADDR_2 22

// input
#define INPUT_ROW 8
#define INPUT_COL 8
#define INPUT_CHANNEL 3

#define OUTPUT_ROW 6
#define OUTPUT_COL 6
#define OUTPUT_CHANNEL 4

#define KERNEL_SIZE 3
#define PADDING 0

#define N_MACRO_PER_GROUP 8
#define N_MACRO 32
#define N_VCOL 2
#define N_GROUP_VCOL 16
#define N_GROUP 4
#define N_USE_GROUP 4
#define N_ROW 16
#define N_COMP 16
#define N_MACRO_REDUCE 256 // N_ROW * N_COMP = 64 * 16 = 1024;

#define INPUT_BUFFER_SIZE_PER_GROUP 128

#define OUT_SPATIAL_TILE 1
#define OUT_REDUCE_TILE 2

    def copy_input_to_input_buffer_for_all_group(
                        null<int8>,
                        local_input< <6, 72>, int8, __INPUT_MEMORY__>, 
                        use_input_buffer< <1, N_GROUP, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
                        oh<index>,
                        ow<index>,
                        i<index> 
){
    t_0 = KERNEL_SIZE * KERNEL_SIZE;
    sliding_window_size = t_0 * INPUT_CHANNEL;
    trans_input_len = Min(INPUT_BUFFER_SIZE_PER_GROUP, sliding_window_size - i);
    
        group_input_buffer = Slice(use_input_buffer, 
            [0,0,0],
            [1,1,trans_input_len],
            [1,1,1]
        );
        delta_oh = 0 / 2;
        group_oh = oh + delta_oh;
        group_ih = group_oh * 1;

        delta_ow = 0 % 2;
        group_ow = ow + delta_ow;
        
        t_1 =  KERNEL_SIZE * INPUT_CHANNEL;
        t_2 = group_ih * t_1;
        im2col_begin = t_2 + i;
        group_im2col_input = Slice(local_input,
            [group_ow, im2col_begin],
            [1, trans_input_len],
            [1, 1]
        );
        Trans(group_im2col_input, group_input_buffer);
    
        group_input_buffer = Slice(use_input_buffer, 
            [0,1,0],
            [1,1,trans_input_len],
            [1,1,1]
        );
        delta_oh = 1 / 2;
        group_oh = oh + delta_oh;
        group_ih = group_oh * 1;

        delta_ow = 1 % 2;
        group_ow = ow + delta_ow;
        
        t_1 =  KERNEL_SIZE * INPUT_CHANNEL;
        t_2 = group_ih * t_1;
        im2col_begin = t_2 + i;
        group_im2col_input = Slice(local_input,
            [group_ow, im2col_begin],
            [1, trans_input_len],
            [1, 1]
        );
        Trans(group_im2col_input, group_input_buffer);
    
        group_input_buffer = Slice(use_input_buffer, 
            [0,2,0],
            [1,1,trans_input_len],
            [1,1,1]
        );
        delta_oh = 2 / 2;
        group_oh = oh + delta_oh;
        group_ih = group_oh * 1;

        delta_ow = 2 % 2;
        group_ow = ow + delta_ow;
        
        t_1 =  KERNEL_SIZE * INPUT_CHANNEL;
        t_2 = group_ih * t_1;
        im2col_begin = t_2 + i;
        group_im2col_input = Slice(local_input,
            [group_ow, im2col_begin],
            [1, trans_input_len],
            [1, 1]
        );
        Trans(group_im2col_input, group_input_buffer);
    
        group_input_buffer = Slice(use_input_buffer, 
            [0,3,0],
            [1,1,trans_input_len],
            [1,1,1]
        );
        delta_oh = 3 / 2;
        group_oh = oh + delta_oh;
        group_ih = group_oh * 1;

        delta_ow = 3 % 2;
        group_ow = ow + delta_ow;
        
        t_1 =  KERNEL_SIZE * INPUT_CHANNEL;
        t_2 = group_ih * t_1;
        im2col_begin = t_2 + i;
        group_im2col_input = Slice(local_input,
            [group_ow, im2col_begin],
            [1, trans_input_len],
            [1, 1]
        );
        Trans(group_im2col_input, group_input_buffer);
    
}



def main(null<int8>){
    // prepare input and weight
    
        global_input = Buffer(<6, 72>, int8, __GLOBAL__);
    
    global_weight = Buffer(<OUT_SPATIAL_TILE, OUT_REDUCE_TILE, N_COMP, N_GROUP, N_GROUP_VCOL>, int8, __GLOBAL__);
    
    global_pimset_mask = Buffer(<OUT_SPATIAL_TILE, N_GROUP_VCOL>, int1, __GLOBAL__);
    local_pimset_mask = Buffer(<OUT_SPATIAL_TILE, N_GROUP_VCOL>, int1, __INPUT_MEMORY__);
    Trans(global_pimset_mask, local_pimset_mask);

    // prepare output buffers
    global_output_i32 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int32, __GLOBAL__);
    local_output_i32 = Buffer(<OUTPUT_ROW, OUTPUT_COL, 4>, int32, __OUTPUT_MEMORY__);

    // Copy input and index into local memory
    
        
            local_input = Buffer(<2, 72>, int8, __INPUT_MEMORY__);
        
    
    // Trans(global_input, local_input);

    // Prepare memory's that will be used
    
    // PIM input reg buffer, it is a double-buffer. Each group use 128 byte, total 4 groups.
    pim_input_reg_buffer = Buffer(<2,N_GROUP,INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__);

    // PIM output reg buffer, it's capacity is 4096 bytes, but we use it to store int32 data, so the buffer's shape is 1024
    pim_output_reg_buffer = Buffer(<1024>, int32, __PIM_OUTPUT_REG_BUFFER__);
    
    // Macros
    macros = Buffer(<N_ROW, N_COMP, N_GROUP, N_GROUP_VCOL>, int8, __MACRO__);

    // Spill
    local_spill = Buffer(<4>, index, __INDEX_MEMORY__);

    // a blank buffer used to clear other buffer
    local_blank = Buffer(<N_GROUP_VCOL>, int32, __BLANK_MEMORY__);
    local_output_for_temp_sum = Buffer(<N_GROUP_VCOL>, int32, __TEMP_SUM_MEMORY__);

    // TODO: Add 'SPECIAL_REG_' prefix for these macro.
    SpecialRegSet(SPECIAL_REG_INPUT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_WEIGHT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_OUTPUT_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_GROUP_SIZE, N_MACRO_PER_GROUP);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_GROUP_NUM, N_USE_GROUP);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM, N_GROUP_VCOL);
    SpecialRegSet(SPECIAL_REG_GROUP_INPUT_STEP, INPUT_BUFFER_SIZE_PER_GROUP);

    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 32);

    // out_channel_outer_tile_size = OUTPUT_CHANNEL/N_GROUP_VCOL;
    for out_channel_begin in range(0, OUTPUT_CHANNEL, N_GROUP_VCOL) carry (null) {
        out_channel_end = Min(out_channel_begin + N_GROUP_VCOL, OUTPUT_CHANNEL);
        out_channel_len = out_channel_end - out_channel_begin;
        out_tile_i = out_channel_begin / N_GROUP_VCOL;

        use_pimset_mask = Slice(local_pimset_mask,
            [out_tile_i, 0],
            [1, N_GROUP_VCOL],
            [1, 1]
        );
        CIMSet(use_pimset_mask);

        inner_reduce_tile_size = N_ROW;
        for out_reduce_begin in range(0, OUT_REDUCE_TILE, inner_reduce_tile_size) carry (null){

            out_reduce_end = Min(out_reduce_begin + inner_reduce_tile_size, OUT_REDUCE_TILE);
            out_reduce_len = out_reduce_end - out_reduce_begin;

            // Step 1: Prepare weight
            // notice that weight.shape = <TIME, N_TO, N_GROUP, N_MACRO_PER_GROUP, N_VCOL>
            use_weight = Slice(global_weight,
                        [out_tile_i, out_reduce_begin, 0, 0, 0],              // offsets
                        [1, out_reduce_len, N_COMP, N_GROUP, N_GROUP_VCOL],   // sizes
                        [1,1,1,1,1]                                           // strides
                        );
            use_macros = Slice(macros,
                [0, 0, 0, 0],
                [out_reduce_len, N_COMP, N_GROUP, N_GROUP_VCOL],
                [1,1,1,1]
            );
            Trans(use_weight, use_macros);

            // Iter over output's height and width
            // Notice that we have 4 group, so each time we deal with 4 pixel in a square.
            // So, the 'step' of oh and ow is 2.
            double_buffer_id = 1;
            Save(local_spill, [0], double_buffer_id);
            for ow in range(0,OUTPUT_COL,2) carry(null) {
                
                    use_global_input = Slice(global_input,
                        [ow, 0],
                        [2, 72],
                        [1, 1]
                    );
                    Trans(use_global_input, local_input);
                
                for oh in range(0,OUTPUT_ROW,2) carry(null) {
                    // Double buffer index
                    double_buffer_id = Load(local_spill, [0]);
                    double_buffer_id = 1 - double_buffer_id;
                    Save(local_spill, [0], double_buffer_id);

                    // Step 3: Prepare input
                    use_input_buffer = Slice(pim_input_reg_buffer, 
                        [double_buffer_id, 0, 0], 
                        [1, N_GROUP, INPUT_BUFFER_SIZE_PER_GROUP], 
                        [1,1,1]
                    );
                    // iter over a sliding window : KERNEL_SIZE * KERNEL_SIZE * INPUT_CHANNEL
                    t_ = KERNEL_SIZE * KERNEL_SIZE;
                    sliding_window_size = t_ * INPUT_CHANNEL;
                    row_to_activate = 0;
                    Save(local_spill, [1], row_to_activate);

                    begin_tile_in_window = out_reduce_begin * N_COMP;
                    tile_size_in_window = N_ROW * N_COMP;
                    end_tile_in_window = Min(sliding_window_size, begin_tile_in_window + tile_size_in_window);
                    //Print(begin_tile_in_window);
                    //Print(end_tile_in_window);
                    //Debug();
                    for i_tile_in_window in range(begin_tile_in_window, end_tile_in_window, INPUT_BUFFER_SIZE_PER_GROUP) carry(null){
                        copy_input_to_input_buffer_for_all_group(null,
                            local_input, 
                            use_input_buffer,
                            oh,
                             0 ,
                            i_tile_in_window
                        );

                        // Step 4: comsume all 128(or less) input data
                        useful_input_len = Min(sliding_window_size - i_tile_in_window, INPUT_BUFFER_SIZE_PER_GROUP);
                        row_to_activate = Load(local_spill, [1]);
                        for input_begin_in_buffer in range(0, useful_input_len, N_COMP) carry (row_to_activate){
                            
                                input_end_in_buffer = Min(input_begin_in_buffer + N_COMP, useful_input_len);
                                input_len = input_end_in_buffer - input_begin_in_buffer;
                            
                            //Print(useful_input_len);
                            //Print(row_to_activate);
                            // activate macro
                            activate_macro = Slice(use_macros,
                                [row_to_activate, 0, 0, 0],
                                [1,  N_COMP, N_GROUP, N_GROUP_VCOL],
                                [1,1,1,1]
                            );
                            // this is an uncontinous subview!!!
                            compute_use_input_buffer = Slice(use_input_buffer,
                                [0, 0, input_begin_in_buffer],
                                [1, N_GROUP, input_len],
                                [1, 1, 1]
                            );
                            CIMComputeDense(compute_use_input_buffer, activate_macro);
                            
                            row_to_activate = row_to_activate + 1;
                        };
                        Save(local_spill, [1], row_to_activate);
                    };
                    CIMOutput(N_GROUP_VCOL, 0, pim_output_reg_buffer);

                    // TODO: unroll this loop
                    for group_i in range(N_USE_GROUP) carry (null){
                        output_buffer_group_i = Slice(pim_output_reg_buffer, [group_i * N_GROUP_VCOL], [out_channel_len], [1]);
                        use_local_output_for_temp_sum = Slice(local_output_for_temp_sum, [0], [out_channel_len], [1]);
                        Trans(output_buffer_group_i, use_local_output_for_temp_sum);
                        
                        delta_h = group_i / 2;
                        delta_w = group_i % 2;
                        use_local_output_i32 = Slice(local_output_i32, 
                            [oh+delta_h, ow+delta_w, 0], 
                            [1, 1, out_channel_len], 
                            [1, 1, 1]
                        );

                        
                            Trans(use_local_output_for_temp_sum, use_local_output_i32);
                        
                    };
                };
            };
        };
        
            for oh in range(OUTPUT_ROW) carry (null){
                for ow in range(OUTPUT_COL) carry (null){
                    use_local_output_i32 = Slice(local_output_i32, 
                        [oh, ow, 0], 
                        [1, 1, out_channel_len], 
                        [1, 1, 1]
                    );
                    use_global_output_i32 = Slice(global_output_i32, 
                        [oh, ow, out_channel_begin], 
                        [1, 1, out_channel_len], 
                        [1, 1, 1]
                    );
                    Trans(use_local_output_i32, use_global_output_i32);
                    use_blank = Slice(local_blank, [0], [out_channel_len], [1]);
                    Trans(use_blank, use_local_output_i32);
                };
            };
        
    };
}