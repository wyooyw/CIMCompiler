{% include 'op/lib/def_special_regs.cim' %}
{% include 'op/lib/simd.cim' %}

// weight
#define WEIGHT_OUT_CHANNEL {{ OUTPUT_CHANNEL }}

// input
#define INPUT_ROW {{ INPUT_ROW }}
#define INPUT_COL {{ INPUT_COL }}
#define INPUT_CHANNEL {{ INPUT_CHANNEL }}

#define OUTPUT_ROW {{ OUTPUT_ROW }}
#define OUTPUT_COL {{ OUTPUT_COL }}
#define OUTPUT_CHANNEL {{ OUTPUT_CHANNEL }}

#define KERNEL_SIZE {{ KERNEL_SIZE }}
#define PADDING {{ PADDING }}

#define N_MACRO_PER_GROUP {{ N_MACRO_PER_GROUP }}
#define N_MACRO_REDUCE {{ N_MACRO_REDUCE }} // N_ROW * N_COMP = 64 * 16 = 1024;
#define N_MACRO {{ N_MACRO }}
#define N_VCOL {{ N_VCOL }}
#define N_GROUP_VCOL {{ N_GROUP_VCOL }}
#define N_GROUP {{ N_GROUP }}
#define N_USE_GROUP {{ N_USE_GROUP }}
#define N_ROW {{ N_ROW }}
#define N_COMP {{ N_COMP }}

#define INPUT_BUFFER_SIZE_PER_GROUP {{ INPUT_BUFFER_SIZE_PER_GROUP }}
#define N_FROM {{ N_FROM }}
#define N_TO {{ N_TO }}

#define TIME {{ TIME }} // this value is filled by jinja.

#define VALUE_SPARSE_MASK_BASE_ADDR {{ VALUE_SPARSE_MASK_BASE_ADDR }}

#define MAPPING_REDUCE_TO_MACRO_LENGTH {{ MAPPING_REDUCE_TO_MACRO_LENGTH }}
#define MAPPING_MACRO_TO_FROM_LENGTH {{ MAPPING_MACRO_TO_FROM_LENGTH }}
#define MAPPING_MACRO_TO_ROW_LENGTH {{ MAPPING_MACRO_TO_ROW_LENGTH }}
#define MAPPING_FROM_TO_ROW_LENGTH {{ MAPPING_FROM_TO_ROW_LENGTH }}

{% if IM2COL %}
    {% include 'op/lib/input_loader_im2col.cim' %}
{% else %}
    {% include 'op/lib/input_loader.cim' %}
{% endif %}

def main(){
    // input, weight, mask and index will be prepared in memory image
    {% if IM2COL %}
        global_input = Buffer(<{{IM2COL_SIZE_0}}, {{IM2COL_SIZE_1}}>, int8, __GLOBAL__);
    {% else %}
        global_input = Buffer(<INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __GLOBAL__);
    {% endif %}
    global_weight = Buffer(<TIME, N_TO, N_GROUP, N_MACRO_PER_GROUP, N_VCOL>, int8, __GLOBAL__);
    global_mask = Buffer(<TIME, N_FROM, N_MACRO_PER_GROUP>, int1, __GLOBAL__);

    global_mapping_reduce_to_macro = Buffer(<MAPPING_REDUCE_TO_MACRO_LENGTH>, index, __GLOBAL__);
    global_mapping_macro_to_from = Buffer(<MAPPING_MACRO_TO_FROM_LENGTH>, index, __GLOBAL__);
    global_mapping_macro_to_row = Buffer(<MAPPING_MACRO_TO_ROW_LENGTH>, index, __GLOBAL__);
    global_mapping_from_to_row = Buffer(<MAPPING_FROM_TO_ROW_LENGTH>, index, __GLOBAL__);
    mapping_reduce_to_macro = Buffer(<MAPPING_REDUCE_TO_MACRO_LENGTH>, index, __INDEX_MEMORY__);
    mapping_macro_to_from = Buffer(<MAPPING_MACRO_TO_FROM_LENGTH>, index, __INDEX_MEMORY__);
    mapping_macro_to_row = Buffer(<MAPPING_MACRO_TO_ROW_LENGTH>, index, __INDEX_MEMORY__);
    mapping_from_to_row = Buffer(<MAPPING_FROM_TO_ROW_LENGTH>, index, __INDEX_MEMORY__);
    Trans(global_mapping_reduce_to_macro, mapping_reduce_to_macro);
    Trans(global_mapping_macro_to_from, mapping_macro_to_from);
    Trans(global_mapping_macro_to_row, mapping_macro_to_row);
    Trans(global_mapping_from_to_row, mapping_from_to_row);

    global_pimset_mask = Buffer(<MAPPING_REDUCE_TO_MACRO_LENGTH, N_GROUP_VCOL>, int1, __GLOBAL__);
    local_pimset_mask = Buffer(<MAPPING_REDUCE_TO_MACRO_LENGTH, N_GROUP_VCOL>, int1, __INPUT_MEMORY__);
    Trans(global_pimset_mask, local_pimset_mask);

    global_output_i32 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int32, __GLOBAL__);
    local_output_i32 = Buffer(<OUTPUT_ROW, OUTPUT_COL, N_GROUP_VCOL>, int32, __OUTPUT_MEMORY__);

    // a blank buffer used to clear other buffer
    local_blank = Buffer(<N_GROUP_VCOL>, int32, __BLANK_MEMORY__);
    local_output_for_temp_sum = Buffer(<N_GROUP_VCOL>, int32, __TEMP_SUM_MEMORY__);

    // Copy input and index into local memory
    {% if IM2COL %}
        {% if IM2COL_SMALL_INPUT_MEMORY %}
            local_input = Buffer(<2, {{IM2COL_SIZE_1}}>, int8, __INPUT_MEMORY__);
        {% else %}
            local_input = Buffer(<{{IM2COL_SIZE_0}}, {{IM2COL_SIZE_1}}>, int8, __INPUT_MEMORY__);
            Trans(global_input, local_input);
        {% endif %}
    {% else %}
        local_input = Buffer(<INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __INPUT_MEMORY__);
        Trans(global_input, local_input);
    {% endif %}

    // Prepare memory's that will be used
    
    // PIM input reg buffer, it is a double-buffer. Each group use 128 byte, total 4 groups.
    pim_input_reg_buffer = Buffer(<2,N_GROUP,INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__);

    // PIM output reg buffer, it's capacity is 4096 bytes, but we use it to store int32 data, so the buffer's shape is 1024
    pim_output_reg_buffer = Buffer(<1024>, int32, __PIM_OUTPUT_REG_BUFFER__);
    
    // Macros
    macros = Buffer(<N_ROW, N_COMP, N_GROUP, N_GROUP_VCOL>, int8, __MACRO__);

    // Mask Buffer
    buffer_mask = Buffer(<N_MACRO_REDUCE, N_FROM, N_MACRO_PER_GROUP>, int1, __PIM_MASK_DATA_REG_BUFFER__);

    // Spill
    local_spill = Buffer(<16>, index, __INDEX_MEMORY__);

    // TODO: Add 'SPECIAL_REG_' prefix for these macro.
    SpecialRegSet(SPECIAL_REG_INPUT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_WEIGHT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_OUTPUT_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_GROUP_SIZE, N_MACRO_PER_GROUP);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_GROUP_NUM, N_USE_GROUP);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM, N_GROUP_VCOL);
    SpecialRegSet(SPECIAL_REG_GROUP_INPUT_STEP, N_FROM);

    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 32);

    macro_to_from_begin = 0;
    row_abs_begin = 0;
    from_to_row_begin = 0;
    // Spill
    Save(local_spill, [0], macro_to_from_begin);
    Save(local_spill, [1], row_abs_begin);
    Save(local_spill, [5], from_to_row_begin);
    // @unroll
    for i_reduce_to_macro in range(0, MAPPING_REDUCE_TO_MACRO_LENGTH) 
        carry (){

        out_channel_begin = i_reduce_to_macro * N_GROUP_VCOL;
        out_channel_end = Min(WEIGHT_OUT_CHANNEL, out_channel_begin + N_GROUP_VCOL);
        out_channel_len = out_channel_end - out_channel_begin;
        Save(local_spill, [7], out_channel_begin);
        Save(local_spill, [8], out_channel_len);

        use_pimset_mask = local_pimset_mask[i_reduce_to_macro:i_reduce_to_macro+1, 0:N_GROUP_VCOL];
        CIMSet(use_pimset_mask);

        macro_to_from_begin = Load(local_spill, [0]);
        macro_to_from_size = Load(mapping_reduce_to_macro, [i_reduce_to_macro]);
        macro_to_from_end = macro_to_from_begin + macro_to_from_size;
        begin_tile_in_window = 0;
        for i_macro_to_from in range(macro_to_from_begin, macro_to_from_end) 
            carry (begin_tile_in_window){
            
            row_size = Load(mapping_macro_to_row, [i_macro_to_from]); // how many 16 in a macro(i.e. how many row to use)
            from_to_row_size = Load(mapping_macro_to_from, [i_macro_to_from]); // how many 128 in a macro

            // Step 1: Prepare weight
            // notice that weight.shape = <TIME, N_TO, N_GROUP, N_MACRO_PER_GROUP, N_VCOL>
            row_abs_begin = Load(local_spill, [1]);
            use_weight = global_weight[row_abs_begin:row_abs_begin+row_size, 
                                       0:N_TO, 
                                       0:N_GROUP, 
                                       0:N_MACRO_PER_GROUP, 
                                       0:N_VCOL];
            use_macros = macros[0:row_size, 
                                0:N_COMP, 
                                0:N_GROUP, 
                                0:N_GROUP_VCOL];
            Trans(use_weight, use_macros);

            // Step 2: Prepare mask
            // global_mask.shape = <TIME, N_FROM, N_MACRO_PER_GROUP>
            use_global_mask = global_mask[row_abs_begin:row_abs_begin+row_size,
                                          0:N_FROM,
                                          0:N_MACRO_PER_GROUP];
            // buffer_mask.shape = <FROM_OVER_TO, N_FROM, N_MACRO_PER_GROUP>
            // TODO: It will be error when weight_time_size > FROM_OVER_TO. Check this later.
            use_buffer_mask = buffer_mask[0:row_size,
                                          0:N_FROM,
                                          0:N_MACRO_PER_GROUP];
            Trans(use_global_mask, use_buffer_mask);

            // begin_tile_in_window
            t_ = KERNEL_SIZE * KERNEL_SIZE;
            sliding_window_size = t_ * INPUT_CHANNEL;
            tile_size_in_window = from_to_row_size * N_FROM;
            end_tile_in_window = Min(sliding_window_size, begin_tile_in_window + tile_size_in_window);

            // Iter over output's height and width
            // Notice that we have 4 group, so each time we deal with 4 pixel in a square.
            // So, the 'step' of oh and ow is 2.
            double_buffer_id = 1;
            Save(local_spill,[6],double_buffer_id);
            for ow in range(0,OUTPUT_COL,2) carry() {
                
                {% if IM2COL_SMALL_INPUT_MEMORY %}
                    use_global_input = global_input[ow:ow+2, 0:{{IM2COL_SIZE_1}}];
                    Trans(use_global_input, local_input);
                {% endif %}

                for oh in range(0,OUTPUT_ROW,2) carry() {
                    // Double buffer index
                    double_buffer_id = Load(local_spill,[6]);
                    double_buffer_id = 1 - double_buffer_id;
                    Save(local_spill,[6],double_buffer_id);

                    // Step 3: Prepare input
                    use_input_buffer = pim_input_reg_buffer[double_buffer_id:double_buffer_id+1, 
                                                            0:N_GROUP, 
                                                            0:INPUT_BUFFER_SIZE_PER_GROUP];
                    
                    // iter over a sliding window : KERNEL_SIZE * KERNEL_SIZE * INPUT_CHANNEL
                    
                    row_to_activate = 0;
                    sparse_mask_addr = VALUE_SPARSE_MASK_BASE_ADDR;
                    //Save(local_spill, [2], sparse_mask_addr);
                    //Save(local_spill, [3], row_to_activate);

                    from_to_row_begin = Load(local_spill, [5]);
                    from_to_row_size = Load(mapping_macro_to_from, [i_macro_to_from]);
                    from_to_row_end = from_to_row_begin + from_to_row_size;
                    for i_from_to_row in range(from_to_row_begin, from_to_row_end) 
                        carry (sparse_mask_addr, row_to_activate){
                        i_rel_from_to_row = i_from_to_row - from_to_row_begin;
                        tt_ = i_rel_from_to_row * N_FROM;
                        i_tile_in_window = begin_tile_in_window + tt_;
                        copy_input_to_input_buffer_for_all_group(
                            local_input, 
                            use_input_buffer,
                            oh,
                            {% if IM2COL_SMALL_INPUT_MEMORY %} 0 {% else %} ow {% endif %},
                            i_tile_in_window
                        );
                        // all 4 * 128 inputs are now in input_reg_buf.

                        // Step 4: do multiple 128 to 16 compute
                        sparse_mask_step_element = N_FROM * N_MACRO_PER_GROUP;
                        sparse_mask_step = sparse_mask_step_element / 8; // mask is stored by 1bit
                        compute_time = Load(mapping_from_to_row, [i_from_to_row]);
                        //sparse_mask_addr = Load(local_spill, [2]);
                        //row_to_activate = Load(local_spill, [3]);
                        row_to_activate_end = row_to_activate + compute_time;
                        for i_compute in range(row_to_activate, row_to_activate_end) carry (sparse_mask_addr){
                            // give mask addr to special register
                            SpecialRegSet(SPECIAL_REG_VALUE_SPARSE_MASK_ADDR, sparse_mask_addr);
                            // activate macro
                            activate_macro = use_macros[i_compute:i_compute+1,
                                                        0:N_COMP,
                                                        0:N_GROUP,
                                                        0:N_GROUP_VCOL];
                            //Print(sparse_mask_addr);
                            //Debug();
                            CIMComputeValueSparse(use_input_buffer, activate_macro);
                            
                            
                            sparse_mask_addr = sparse_mask_addr + sparse_mask_step;
                        };
                        row_to_activate = row_to_activate_end;
                        //Save(local_spill, [2], sparse_mask_addr);
                        //Save(local_spill, [3], row_to_activate);
                        
                    };
                    // check output of first 4 output pixels.
                    
                    CIMOutput(N_GROUP_VCOL, 0, pim_output_reg_buffer);

                    out_channel_begin = Load(local_spill, [7]);
                    out_channel_len = Load(local_spill, [8]);
                    use_local_output_for_temp_sum = local_output_for_temp_sum[0:out_channel_len];
                    // TODO: unroll this loop
                    {% for group_i in range(N_USE_GROUP) %}
                        t2 = {{group_i}} * N_GROUP_VCOL;
                        output_buffer_group_i = pim_output_reg_buffer[t2:t2+out_channel_len];
                        delta_h = {{group_i}} / 2;
                        delta_w = {{group_i}} % 2;
                        Trans(output_buffer_group_i, use_local_output_for_temp_sum);
                        
                        oh_ = oh+delta_h;
                        ow_ = ow+delta_w;
                        use_local_output_i32 = local_output_i32[oh_:oh_+1, 
                                                                ow_:ow_+1, 
                                                                0:out_channel_len];

                        // if SINGLE_OUTER_REDUCE==1, we do quantify inside oh and ow loop, to turn i32 to i8 immediately for saving memory.
                        // else, we add result to i32 output, and do quantize when the partial sum finish compute.
                        {% if SINGLE_OUTER_REDUCE == 1 %}
                            Trans(use_local_output_for_temp_sum, use_local_output_i32);
                        {% else %}
                            SIMD(VVADD, use_local_output_for_temp_sum, use_local_output_i32, use_local_output_i32);
                        {% endif %}
                    {% endfor %}
                };
            };

            begin_tile_in_window = end_tile_in_window;

            row_abs_begin = Load(local_spill, [1]);
            row_abs_begin = row_abs_begin + row_size;
            Save(local_spill, [1], row_abs_begin);

            from_to_row_begin = Load(local_spill, [5]);
            from_to_row_size = Load(mapping_macro_to_from, [i_macro_to_from]);
            from_to_row_begin = from_to_row_begin + from_to_row_size;
            Save(local_spill, [5], from_to_row_begin);

        }; // end of out_reduce_i
        macro_to_from_begin = macro_to_from_end;
        Save(local_spill, [0], macro_to_from_begin);

        {% if FAST_MODE %}
            Trans(local_output_i32, global_output_i32);
        {% else %}
            out_channel_begin = Load(local_spill, [7]);
            out_channel_len = Load(local_spill, [8]);
            for oh in range(OUTPUT_ROW) carry (){
                for ow in range(OUTPUT_COL) carry (){
                    use_local_output_i32 = local_output_i32[oh:oh+1, 
                                                            ow:ow+1, 
                                                            0:out_channel_len];
                    use_global_output_i32 = global_output_i32[oh:oh+1, 
                                                              ow:ow+1, 
                                                              out_channel_begin:out_channel_begin+out_channel_len];
                    Trans(use_local_output_i32, use_global_output_i32);
                    use_blank = local_blank[0:out_channel_len];
                    Trans(use_blank, use_local_output_i32);
                };
            };
        {% endif %}
        
    }; // end of out_channel_begin
    // Trans(local_output_i8, global_output_i8);
    // Trans(local_output, global_output);

}