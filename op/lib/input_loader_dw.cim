def copy_input_to_input_buffer_dw(
                        null<int8>,
                        local_input< <1, INPUT_ROW, INPUT_COL>, int8, __INPUT_MEMORY__>, 
                        use_input_buffer< <1, N_GROUP, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
                        oh<index>,
                        ow<index>,
                        out_channel_begin<index> 
){
    for g in range(N_GROUP) carry(null){
        delta_h = g / 2;
        delta_w = g % 2;
        ih = oh + delta_h;
        iw = ow + delta_w;
        ih = ih * {{STRIDE}};
        iw = iw * {{STRIDE}};
        for ker_row in range(KERNEL_SIZE) carry(null){
            ih = ih + ker_row;
            
            use_local_input = Slice(local_input, 
                [0, ih, iw],
                [1, 1, KERNEL_SIZE],
                [1,1,1]
            );
            group_use_input_buffer = Slice(use_input_buffer,
                [0, g, ker_row * KERNEL_SIZE],
                [1, 1, KERNEL_SIZE],
                [1, 1, 1]
            );
            Trans(use_local_input, group_use_input_buffer);
        };
    };
}