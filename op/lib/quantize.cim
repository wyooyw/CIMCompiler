def quantify(
    out_channel_begin<index>,
    out_channel_len<index>,
    local_output_i32< <-1, -1, -1>, int32, __OUTPUT_MEMORY__>,
    local_bias_scale< < -1, 2>, int32, __INPUT_MEMORY__>,
    local_output_i8< < -1,  -1,  -1>, int8, __OUTPUT_MEMORY__>,
    local_out_zp< <1>, int32, __INPUT_MEMORY__>,
    local_blank< <-1>, int32, __BLANK_MEMORY__>
    ){
    output_row = Shape(local_output_i32, 0);
    output_col = Shape(local_output_i32, 1);
    // Do quantify here
    for oh in range(0,output_row) carry(){
        for ow in range(0,output_col) carry(){
            use_i32_output = Slice(local_output_i32,
                [oh,ow,0],
                [1,1,out_channel_len],
                [1,1,1]
            );
            use_bias_scale = Slice(local_bias_scale,
                [out_channel_begin, 0],
                [out_channel_len, 2],
                [1, 1]
            );
            use_i8_output = Slice(local_output_i8,
                [oh,ow,out_channel_begin],
                [1,1,out_channel_len],
                [1,1,1]
            );
            {% if FAST_MODE_OUTPUT_FILL_MEMORY is defined and FAST_MODE_OUTPUT_FILL_MEMORY %}
                SIMD(QUANTIZE,
                    use_i32_output, 
                    use_bias_scale, 
                    local_out_zp, 
                    use_i32_output
                );
            {% else %}
                SIMD(QUANTIZE, 
                    use_i32_output, 
                    use_bias_scale, 
                    local_out_zp, 
                    use_i8_output
                );
            {% endif %}

            // Clear origin buffer
            use_blank = Slice(local_blank, [0], [out_channel_len], [1]);
            Trans(use_blank, use_i32_output);
        };
    };
}
