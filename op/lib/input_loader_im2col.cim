def copy_input_to_input_buffer_for_all_group(
                        null<int8>,
                        local_input< <-1, {{IM2COL_SIZE_1}}>, int8, __INPUT_MEMORY__>, 
                        use_input_buffer< <1, N_GROUP, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
                        oh<index>,
                        ow<index>,
                        i<index> 
){
    t_0 = KERNEL_SIZE * KERNEL_SIZE;
    sliding_window_size = t_0 * INPUT_CHANNEL;
    trans_input_len = Min(INPUT_BUFFER_SIZE_PER_GROUP, sliding_window_size - i);
    {% for g in range(N_GROUP) %}
        group_input_buffer = Slice(use_input_buffer, 
            [0,{{g}},0],
            [1,1,trans_input_len],
            [1,1,1]
        );
        delta_oh = {{g}} / 2;
        group_oh = oh + delta_oh;
        group_ih = group_oh * {{STRIDE}};

        delta_ow = {{g}} % 2;
        group_ow = ow + delta_ow;
        
        t_1 =  KERNEL_SIZE * INPUT_CHANNEL;
        t_2 = group_ih * t_1;
        im2col_begin = t_2 + i;
        group_im2col_input = Slice(local_input,
            [group_ow, im2col_begin],
            [1, trans_input_len],
            [1, 1]
        );
        Trans(group_im2col_input, group_input_buffer);
    {% endfor %}
}