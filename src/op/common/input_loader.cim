{% if INPUT_BUFFER_SIZE_PER_GROUP > INPUT_CHANNEL and INPUT_BUFFER_SIZE_PER_GROUP % INPUT_CHANNEL == 0 %}

def copy_input_to_input_buffer_for_all_group_iclt128(
                        null<int8>,
                        local_input< <INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __INPUT_MEMORY__>, 
                        use_input_buffer< <1, N_GROUP, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
                        oh<index>,
                        ow<index>,
                        i<index> 
){

    use_local_input = Slice(local_input,
           [0, 0, 0],
           [1, 1, INPUT_CHANNEL],
           [1, 1, 1]
    );
    
    // copy one pixel one time
    num_pixel_per_buffer = INPUT_BUFFER_SIZE_PER_GROUP / INPUT_CHANNEL;
    num_pixel_per_window = KERNEL_SIZE * KERNEL_SIZE;

    ker_pixel_begin = i / INPUT_CHANNEL;
    ker_pixel_end = Min(ker_pixel_begin + num_pixel_per_buffer, num_pixel_per_window);

    for ker_pixel_id in range(ker_pixel_begin, ker_pixel_end) carry(null){
        pixel_delta = ker_pixel_id - ker_pixel_begin;

        ker_row_id = ker_pixel_id / KERNEL_SIZE;
        ker_col_id = ker_pixel_id % KERNEL_SIZE;
        ih = oh * {{STRIDE}};
        iw = ow * {{STRIDE}};
        row_id = ih + ker_row_id;
        col_id = iw + ker_col_id;

        input_buffer_addr_begin = pixel_delta * INPUT_CHANNEL;
        {% for g in range(N_USE_GROUP) %}
            delta_h = {{g}} / 2;
            delta_h = delta_h * {{STRIDE}};
            delta_w = {{g}} % 2;
            delta_w = delta_w * {{STRIDE}};
            use_local_input = Slice(local_input,
                [row_id+delta_h, col_id+delta_w, 0],
                [1, 1, INPUT_CHANNEL],
                [1, 1, 1]
            );
            use_use_input_buffer = Slice(use_input_buffer,
                [0,{{g}},input_buffer_addr_begin],
                [1,1,INPUT_CHANNEL],
                [1,1,1]
            );
            Trans(use_local_input, use_use_input_buffer);
        {% endfor %}
    };
}

{% elif INPUT_CHANNEL >= INPUT_BUFFER_SIZE_PER_GROUP and INPUT_CHANNEL % INPUT_BUFFER_SIZE_PER_GROUP == 0 %}

def copy_input_to_input_buffer_for_all_group_icgt128( // input channel greater than 128
                        null<int8>,
                        local_input< <INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __INPUT_MEMORY__>, 
                        use_input_buffer< <1, N_GROUP, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
                        oh<index>,
                        ow<index>,
                        i<index> 
){
    
    // copy one pixel one time
    //num_pixel_per_buffer = INPUT_BUFFER_SIZE_PER_GROUP / INPUT_CHANNEL;
    //num_pixel_per_window = KERNEL_SIZE * KERNEL_SIZE;

    ker_pixel_id = i / INPUT_CHANNEL;
    ker_row_id = ker_pixel_id / KERNEL_SIZE;
    ker_col_id = ker_pixel_id % KERNEL_SIZE;
    ih = oh * {{STRIDE}};
    iw = ow * {{STRIDE}};
    row_id = ih + ker_row_id;
    col_id = iw + ker_col_id;
    channel_id = i % INPUT_CHANNEL;
    {% for g in range(N_USE_GROUP) %}
        delta_h = {{g}} / 2;
        delta_h = delta_h * {{STRIDE}};
        delta_w = {{g}} % 2;
        delta_w = delta_w * {{STRIDE}};
        use_local_input = Slice(local_input,
            [row_id + delta_h, col_id + delta_w, channel_id],
            [1, 1, INPUT_BUFFER_SIZE_PER_GROUP],
            [1, 1, 1]
        );
        use_use_input_buffer = Slice(use_input_buffer,
                [0,{{g}},0],
                [1,1,INPUT_BUFFER_SIZE_PER_GROUP],
                [1,1,1]
            );
        Trans(use_local_input, use_use_input_buffer);
    {% endfor %}
}

{% elif INPUT_CHANNEL * KERNEL_SIZE * KERNEL_SIZE <= INPUT_BUFFER_SIZE_PER_GROUP %}

def copy_input_to_input_buffer_for_all_group_fgt128( // filter less than 128
                        null<int8>,
                        local_input< <INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __INPUT_MEMORY__>, 
                        use_input_buffer< <1, N_GROUP, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
                        oh<index>,
                        ow<index>,
                        i<index> 
){
    
    // copy one pixel one time
    //num_pixel_per_buffer = INPUT_BUFFER_SIZE_PER_GROUP / INPUT_CHANNEL;
    //num_pixel_per_window = KERNEL_SIZE * KERNEL_SIZE;

    ker_pixel_id = 0;
    ker_row_id = 0;
    ker_col_id = 0;
    ih = oh * {{STRIDE}};
    iw = ow * {{STRIDE}};
    channel_id = 0;
    plane_size = KERNEL_SIZE * INPUT_CHANNEL;
    for kh in range(KERNEL_SIZE) carry (null){
        row_id = ih + kh;
        col_id = iw;
        {% for g in range(N_USE_GROUP) %}
            delta_h = {{g}} / 2;
            delta_h = delta_h * {{STRIDE}};
            delta_w = {{g}} % 2;
            delta_w = delta_w * {{STRIDE}};
            use_local_input = Slice(local_input,
                [row_id + delta_h, col_id + delta_w, 0],
                [1, KERNEL_SIZE, INPUT_CHANNEL],
                [1, 1, 1]
            );
            use_use_input_buffer = Slice(use_input_buffer,
                    [0,{{g}}, kh * plane_size],
                    [1,1, plane_size],
                    [1,1,1]
                );
            Trans(use_local_input, use_use_input_buffer);
        {% endfor %}
    };
}

{% else %}

def copy_input_to_input_buffer_for_all_group_general(
    null<int8>,
    local_input< <INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __INPUT_MEMORY__>, 
    use_input_buffer< <1, N_GROUP, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
    oh<index>,
    ow<index>,
    i<index> 
){
    pos = i;
    pos_begin = i;
    pos_end = i + INPUT_BUFFER_SIZE_PER_GROUP;
    pixel_size = INPUT_CHANNEL;

    pixel_begin = pos_begin / pixel_size;

    // plane_end = ceil(pos_end, plane_size)
    t1 = pos_end + pixel_size;
    t2 = t1 - 1;
    pixel_end = t2 / pixel_size;
    buf_begin = 0;
    for i_pixel in range(pixel_begin, pixel_end) carry(buf_begin){
        n_before_pixel = i_pixel * INPUT_CHANNEL;
        in_pixel_begin = 0 - Min(0, n_before_pixel - pos_begin);
        in_pixel_end = Min(INPUT_CHANNEL, pos_end - n_before_pixel);
        in_pixel_len = in_pixel_end - in_pixel_begin;
        ker_row_id = i_pixel / KERNEL_SIZE;
        ker_col_id = i_pixel % KERNEL_SIZE;
        
        ih = oh * {{STRIDE}};
        iw = ow * {{STRIDE}};
        row_id = ih + ker_row_id;
        col_id = iw + ker_col_id;
        {% for g in range(N_USE_GROUP) %}
            delta_h = {{g}} / 2;
            delta_h = delta_h * {{STRIDE}};
            delta_w = {{g}} % 2;
            delta_w = delta_w * {{STRIDE}};
            use_local_input = Slice(local_input,
                [row_id + delta_h, col_id + delta_w, in_pixel_begin],
                [1, 1, in_pixel_len], 
                [1, 1, 1]
            );

            use_use_input_buffer = Slice(use_input_buffer,
                [0, {{g}}, buf_begin],
                [1, 1, in_pixel_len],
                [1, 1, 1]
            );
            Trans(use_local_input, use_use_input_buffer);
        {% endfor %}
        buf_begin = buf_begin + in_pixel_len;
    };
}

{% endif %}

def copy_input_to_input_buffer_for_all_group(
                        null<int8>,
                        local_input< <INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __INPUT_MEMORY__>, 
                        use_input_buffer< <1, N_GROUP, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
                        oh<index>,
                        ow<index>,
                        i<index> 
){
    {% if INPUT_BUFFER_SIZE_PER_GROUP > INPUT_CHANNEL and INPUT_BUFFER_SIZE_PER_GROUP % INPUT_CHANNEL == 0 %}
        copy_input_to_input_buffer_for_all_group_iclt128(null, local_input, use_input_buffer, oh, ow, i);
    {% elif INPUT_CHANNEL >= INPUT_BUFFER_SIZE_PER_GROUP and INPUT_CHANNEL % INPUT_BUFFER_SIZE_PER_GROUP == 0 %}
        copy_input_to_input_buffer_for_all_group_icgt128(null, local_input, use_input_buffer, oh, ow, i);
    {% elif INPUT_CHANNEL * KERNEL_SIZE * KERNEL_SIZE <= INPUT_BUFFER_SIZE_PER_GROUP %}
        copy_input_to_input_buffer_for_all_group_fgt128(null, local_input, use_input_buffer, oh, ow, i);
    {% else %}
        copy_input_to_input_buffer_for_all_group_general(null, local_input, use_input_buffer, oh, ow, i);
    {% endif %}
}