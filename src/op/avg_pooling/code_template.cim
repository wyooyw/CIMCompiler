{% include 'op/common/def_special_regs.cim' %}
{% include 'op/common/simd.cim' %}

#define INPUT_ROW {{ INPUT_ROW }}
#define INPUT_COL {{ INPUT_COL }}
#define INPUT_CHANNEL {{ INPUT_CHANNEL }}

#define OUTPUT_ROW {{ OUTPUT_ROW }}
#define OUTPUT_COL {{ OUTPUT_COL }}

#define KERNEL_SIZE {{ KERNEL_SIZE }}

def main(){
    global_input = Buffer(<{{INPUT_ROW}}, {{INPUT_COL}}, {{INPUT_CHANNEL}}>, int8, __GLOBAL__);
    local_input = Buffer(<{{KERNEL_SIZE}}, {{KERNEL_SIZE}}, {{INPUT_CHANNEL}}>, int8, __INPUT_MEMORY__);

    global_mul_factor = Buffer(<{{1}}>, int32, __GLOBAL__);
    local_mul_factor = Buffer(<{{1}}>, int32, __INPUT_MEMORY__);
    Trans(global_mul_factor, local_mul_factor);

    global_bias_scale = Buffer(<{{INPUT_CHANNEL}}, 2>, int32, __GLOBAL__);
    global_out_zp = Buffer(<1>, int32, __GLOBAL__);
    local_bias_scale = Buffer(<{{INPUT_CHANNEL}}, 2>, int32, __INPUT_MEMORY__);
    local_out_zp = Buffer(<1>, int32, __INPUT_MEMORY__);
    Trans(global_bias_scale, local_bias_scale);
    Trans(global_out_zp, local_out_zp);

    global_output = Buffer(<{{OUTPUT_ROW}}, {{OUTPUT_COL}}, {{INPUT_CHANNEL}}>, int8, __GLOBAL__);
    local_output_32 = Buffer(<{{INPUT_CHANNEL}}>, int32, __OUTPUT_MEMORY__);
    local_output_8 = Buffer(<{{INPUT_CHANNEL}}>, int8, __OUTPUT_MEMORY__);

    local_blank = Buffer(<{{INPUT_CHANNEL}}>, int32, __OUTPUT_MEMORY__);

    for oh in range(OUTPUT_ROW) carry () {
        for ow in range(OUTPUT_COL) carry () {
            // copy input to local
            for kh in range(KERNEL_SIZE) carry () {
                ih = oh * KERNEL_SIZE;
                iw = ow * KERNEL_SIZE;
                // Split the addition into two operations
                ih_ = ih + kh;
                use_global_input = global_input[ih_:ih_ + 1, iw:iw + KERNEL_SIZE, 0:INPUT_CHANNEL];

                use_local_input = Slice(local_input,
                    [kh, 0, 0],
                    [1, KERNEL_SIZE, INPUT_CHANNEL],
                    [1, 1, 1]
                );
                Trans(use_global_input, use_local_input);
            };

            // do avg pooling
            Trans(local_blank, local_output_32);

            SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 8);
            SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 32);
            SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 32);

            for kh in range(KERNEL_SIZE) carry () {
                for kw in range(KERNEL_SIZE) carry () {
                    use_local_input = local_input[kh:kh + 1, kw:kw + 1, 0:INPUT_CHANNEL];
                    SIMD(VVADD, use_local_input, local_output_32, local_output_32);
                };
            };

            SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 32);
            SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 32);
            SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 32);
            SIMD(VSMUL, local_output_32, local_mul_factor, local_output_32);
            SIMD(VFLOOR, local_output_32, local_output_32);

            SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 32);
            SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 64);
            SpecialRegSet(SPECIAL_REG_SIMD_INPUT_3_BIT_WIDTH, 8);
            SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 8);
            SIMD(QUANTIZE, local_output_32, local_bias_scale, local_out_zp, local_output_8);
            // move to global memory
            use_global_output = global_output[oh:oh + 1, ow:ow + 1, 0:INPUT_CHANNEL];
            Trans(local_output_8, use_global_output);
        };
    };
}