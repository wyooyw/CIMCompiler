{% include 'op/common/def_special_regs.cim' %}
{% include 'op/common/simd.cim' %}

// input
#define INPUT_ROW {{ INPUT_ROW }}
#define INPUT_COL {{ INPUT_COL }}
#define INPUT_CHANNEL {{ INPUT_CHANNEL }}

#define OUTPUT_ROW {{ OUTPUT_ROW }}
#define OUTPUT_COL {{ OUTPUT_COL }}
#define OUTPUT_CHANNEL {{ OUTPUT_CHANNEL }}

#define KERNEL_SIZE {{ KERNEL_SIZE }}
#define PADDING {{ PADDING }}
#define STRIDE {{ STRIDE }}

#define N_MACRO_PER_GROUP {{ N_MACRO_PER_GROUP }}
#define N_MACRO {{ N_MACRO }}
#define N_VCOL {{ N_VCOL }}
#define N_GROUP_VCOL {{ N_GROUP_VCOL }}
#define N_GROUP {{ N_GROUP }}
#define N_ROW {{ N_ROW }}
#define N_COMP {{ N_COMP }}
#define N_MACRO_REDUCE {{ N_MACRO_REDUCE }} // N_ROW * N_COMP = 64 * 16 = 1024;

#define INPUT_BUFFER_SIZE_PER_GROUP {{ INPUT_BUFFER_SIZE_PER_GROUP }}

#define OUT_SPATIAL_TILE {{ OUT_SPATIAL_TILE }}
#define OUT_REDUCE_TILE {{ OUT_REDUCE_TILE }}

def copy_input_to_input_buffer_icgt128( // input channel greater than 128
                        local_input< <INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __INPUT_MEMORY__>, 
                        group_use_input_buffer< <1, 1, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
                        oh<index>,
                        ow<index>,
                        i<index> 
){
    
    // copy one pixel one time
    //num_pixel_per_buffer = INPUT_BUFFER_SIZE_PER_GROUP / INPUT_CHANNEL;
    //num_pixel_per_window = KERNEL_SIZE * KERNEL_SIZE;

    ker_pixel_id = i / INPUT_CHANNEL;
    ker_row_id = ker_pixel_id / KERNEL_SIZE;
    ker_col_id = ker_pixel_id % KERNEL_SIZE;
    row_id = oh + ker_row_id;
    col_id = ow + ker_col_id;
    channel_id = i % INPUT_CHANNEL;
    end_row_id = row_id + 1;
    end_col_id = col_id + 1;
    end_channel_id = channel_id + INPUT_BUFFER_SIZE_PER_GROUP;
    use_local_input = local_input[row_id:end_row_id, col_id:end_col_id, channel_id:end_channel_id];
    Trans(use_local_input, group_use_input_buffer);
}

def copy_input_to_input_buffer_iclt128( // input channel less than 128
                        local_input< <INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __INPUT_MEMORY__>, 
                        group_use_input_buffer< <1, 1, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
                        oh<index>,
                        ow<index>,
                        i<index> 
){
    use_local_input = local_input[0:1, 0:1, 0:INPUT_CHANNEL];
    
    // copy one pixel one time
    num_pixel_per_buffer = INPUT_BUFFER_SIZE_PER_GROUP / INPUT_CHANNEL;
    num_pixel_per_window = KERNEL_SIZE * KERNEL_SIZE;

    ker_pixel_begin = i / INPUT_CHANNEL;
    ker_pixel_end = Min(ker_pixel_begin + num_pixel_per_buffer, num_pixel_per_window);

    // TODO: unroll this loop
    for ker_pixel_id in range(ker_pixel_begin, ker_pixel_end) carry(){
        pixel_delta = ker_pixel_id - ker_pixel_begin;

        ker_row_id = ker_pixel_id / KERNEL_SIZE;
        ker_col_id = ker_pixel_id % KERNEL_SIZE;
        row_id = oh + ker_row_id;
        col_id = ow + ker_col_id;
        end_row_id = row_id + 1;
        end_col_id = col_id + 1;
        use_local_input = local_input[row_id:end_row_id, col_id:end_col_id, 0:INPUT_CHANNEL];

        input_buffer_addr_begin = pixel_delta * INPUT_CHANNEL;
        end_input_buffer_addr = input_buffer_addr_begin + INPUT_CHANNEL;
        use_input_buffer = group_use_input_buffer[0:1, 0:1, input_buffer_addr_begin:end_input_buffer_addr];
        Trans(use_local_input, use_input_buffer);
        
    };
}

def copy_input_to_input_buffer_general(
    local_input< <INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __INPUT_MEMORY__>, 
    group_use_input_buffer< <1, 1, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
    oh<index>,
    ow<index>,
    i<index>
){
    pos = i;
    pos_begin = i;
    pos_end = i + INPUT_BUFFER_SIZE_PER_GROUP;
    pixel_size = INPUT_CHANNEL;

    pixel_begin = pos_begin / pixel_size;

    // plane_end = ceil(pos_end, plane_size)
    t1 = pos_end + pixel_size;
    t2 = t1 - 1;
    pixel_end = t2 / pixel_size;
    buf_begin = 0;
    for i_pixel in range(pixel_begin, pixel_end) carry(buf_begin){
        n_before_pixel = i_pixel * INPUT_CHANNEL;
        in_pixel_begin = 0 - Min(0, n_before_pixel - pos_begin);
        in_pixel_end = Min(INPUT_CHANNEL, pos_end - n_before_pixel);
        in_pixel_len = in_pixel_end - in_pixel_begin;
        ker_h = i_pixel / KERNEL_SIZE;
        ker_w = i_pixel % KERNEL_SIZE;
        
        //Print(i_pixel);
        //Print(in_pixel_begin);
        //Print(in_pixel_end);
        //Print(in_pixel_len);
        oh = oh * {{STRIDE}};
        ow = ow * {{STRIDE}};
        oh_ = oh + ker_h;
        ow_ = ow + ker_w;
        end_in_pixel = in_pixel_begin + in_pixel_len;
        use_local_input = local_input[oh_:oh_ + 1, ow_:ow_ + 1, in_pixel_begin:end_in_pixel];

        end_buf = buf_begin + in_pixel_len;
        use_input_buffer = group_use_input_buffer[0:1, 0:1, buf_begin:end_buf];
        Trans(use_local_input, use_input_buffer);

        buf_begin = buf_begin + in_pixel_len;
    };
}

def copy_input_to_input_buffer(
    local_input< <INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __INPUT_MEMORY__>, 
    group_use_input_buffer< <1, 1, INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__>,
    oh<index>,
    ow<index>,
    i<index> 
){
    copy_input_to_input_buffer_general(local_input, group_use_input_buffer, oh, ow, i);
}


def main(){
    // input, weight, mask and index will be prepared in memory image
    global_input = Buffer(<INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __GLOBAL__);
    global_weight = Buffer(<OUT_SPATIAL_TILE, OUT_REDUCE_TILE, N_COMP, 1, N_GROUP_VCOL>, int8, __GLOBAL__);

    global_pimset_mask = Buffer(<OUT_SPATIAL_TILE, N_GROUP_VCOL>, int1, __GLOBAL__);
    local_pimset_mask = Buffer(<OUT_SPATIAL_TILE, N_GROUP_VCOL>, int1, __INPUT_MEMORY__);
    Trans(global_pimset_mask, local_pimset_mask);

    global_output_i32 = Buffer(<OUTPUT_ROW, OUTPUT_COL, OUTPUT_CHANNEL>, int32, __GLOBAL__);
    local_output_i32 = Buffer(<OUTPUT_ROW, OUTPUT_COL, N_GROUP_VCOL>, int32, __OUTPUT_MEMORY__);

    // a blank buffer used to clear other buffer
    local_blank = Buffer(<N_GROUP_VCOL>, int32, __BLANK_MEMORY__);
    local_output_for_temp_sum = Buffer(<N_GROUP_VCOL>, int32, __TEMP_SUM_MEMORY__);

    // Copy input and index into local memory
    local_input = Buffer(<INPUT_ROW, INPUT_COL, INPUT_CHANNEL>, int8, __INPUT_MEMORY__);
    Trans(global_input, local_input);


    // PIM input reg buffer, it is a double-buffer. Each group use 128 byte, total 4 groups.
    pim_input_reg_buffer = Buffer(<2,N_GROUP,INPUT_BUFFER_SIZE_PER_GROUP>, int8, __PIM_INPUT_REG_BUFFER__);

    // PIM output reg buffer, it's capacity is 4096 bytes, but we use it to store int32 data, so the buffer's shape is 1024
    pim_output_reg_buffer = Buffer(<1024>, int32, __PIM_OUTPUT_REG_BUFFER__);
    
    // Macros
    macros = Buffer(<N_ROW, N_COMP, N_GROUP, N_GROUP_VCOL>, int8, __MACRO__);

    // Spill
    local_spill = Buffer(<4>, index, __INDEX_MEMORY__);

    // TODO: Add 'SPECIAL_REG_' prefix for these macro.
    SpecialRegSet(SPECIAL_REG_INPUT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_WEIGHT_BIT_WIDTH, 8);
    SpecialRegSet(SPECIAL_REG_OUTPUT_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_GROUP_SIZE, N_MACRO_PER_GROUP);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_GROUP_NUM, 1);
    SpecialRegSet(SPECIAL_REG_ACTIVATION_ELEMENT_COL_NUM, N_GROUP_VCOL);
    SpecialRegSet(SPECIAL_REG_GROUP_INPUT_STEP, 0); // set this to 0 for dense linear

    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_1_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_INPUT_2_BIT_WIDTH, 32);
    SpecialRegSet(SPECIAL_REG_SIMD_OUTPUT_BIT_WIDTH, 32);

    // out_channel_outer_tile_size = OUTPUT_CHANNEL/N_GROUP_VCOL;
    out_channel_step = N_GROUP_VCOL; // * N_GROUP;
    for out_channel_begin in range(0, OUTPUT_CHANNEL, out_channel_step) carry () {
        out_channel_end = Min(out_channel_begin + out_channel_step, OUTPUT_CHANNEL);
        out_channel_len = out_channel_end - out_channel_begin;
        out_tile_i = out_channel_begin / out_channel_step;

        use_pimset_mask = local_pimset_mask[out_tile_i:out_tile_i+1, 0:N_GROUP_VCOL];
        CIMSet(use_pimset_mask);

        inner_reduce_tile_size = N_ROW;
        for out_reduce_begin in range(0, OUT_REDUCE_TILE, inner_reduce_tile_size) carry (){

            out_reduce_end = Min(out_reduce_begin + inner_reduce_tile_size, OUT_REDUCE_TILE);
            out_reduce_len = out_reduce_end - out_reduce_begin;

            // Step 1: Prepare weight
            // notice that weight.shape = <TIME, N_TO, N_GROUP, N_MACRO_PER_GROUP, N_VCOL>
            for cp_weight_rel_row in range(out_reduce_len) carry (){
                cp_weight_row = cp_weight_rel_row + out_reduce_begin;
                for cp_weight_comp  in range(N_COMP) carry (){
                    use_weight = global_weight[out_tile_i:out_tile_i+1, cp_weight_row:cp_weight_row+1, cp_weight_comp:cp_weight_comp+1, 0:1, 0:N_GROUP_VCOL];
                    use_macros = macros[cp_weight_rel_row:cp_weight_rel_row+1, cp_weight_comp:cp_weight_comp+1, 0:1, 0:N_GROUP_VCOL];
                    Trans(use_weight, use_macros);
                };
            };
            use_macros = macros[0:out_reduce_len, 0:N_COMP, 0:N_GROUP, 0:N_GROUP_VCOL];
            

            // Iter over output's height and width
            // Notice that we have 4 group, so each time we deal with 4 pixel in a square.
            // So, the 'step' of oh and ow is 2.
            double_buffer_id = 1;

            // ow = 0, oh = 0
            // Double buffer index
            double_buffer_id = 1 - double_buffer_id;

            // Step 3: Prepare input
            use_input_buffer = pim_input_reg_buffer[double_buffer_id:double_buffer_id+1, 0:1, 0:INPUT_BUFFER_SIZE_PER_GROUP];
            // iter over a sliding window : KERNEL_SIZE * KERNEL_SIZE * INPUT_CHANNEL
            sliding_window_size = INPUT_CHANNEL;
            row_to_activate = 0;
            Save(local_spill, [1], row_to_activate);

            begin_tile_in_window = out_reduce_begin * N_COMP;
            tile_size_in_window = N_ROW * N_COMP;
            end_tile_in_window = Min(sliding_window_size, begin_tile_in_window + tile_size_in_window);

            for i_tile_in_window in range(begin_tile_in_window, end_tile_in_window, INPUT_BUFFER_SIZE_PER_GROUP) carry(){
                copy_input_to_input_buffer(
                    local_input, 
                    use_input_buffer,
                    0,
                    0,
                    i_tile_in_window
                );

                // Step 4: comsume all 128(or less) input data
                useful_input_len = Min(sliding_window_size - i_tile_in_window, INPUT_BUFFER_SIZE_PER_GROUP);
                row_to_activate = Load(local_spill, [1]);
                for input_begin_in_buffer in range(0, useful_input_len, N_COMP) carry (row_to_activate){
                    input_end_in_buffer = Min(input_begin_in_buffer + N_COMP, useful_input_len);
                    input_len = input_end_in_buffer - input_begin_in_buffer;

                    // activate macro
                    activate_macro = use_macros[row_to_activate:row_to_activate+1, 0:N_COMP, 0:1, 0:N_GROUP_VCOL];
                    // this is an uncontinous subview!!!
                    compute_use_input_buffer = use_input_buffer[0:1, 0:1, input_begin_in_buffer:input_end_in_buffer];
                    CIMComputeDense(compute_use_input_buffer, activate_macro);
                    
                    row_to_activate = row_to_activate + 1;
                };
                Save(local_spill, [1], row_to_activate);
            };
            CIMOutput(N_GROUP_VCOL, 0, pim_output_reg_buffer);

            // TODO: unroll this loop
            group_i = 0;
            t_ = group_i * N_GROUP_VCOL;
            output_buffer_group_i = pim_output_reg_buffer[t_:t_ + N_GROUP_VCOL];
            Trans(output_buffer_group_i, local_output_for_temp_sum);
            channel_offset_ = N_GROUP_VCOL * group_i;
            local_output_group_i = local_output_i32[0:1, 0:1, 0:N_GROUP_VCOL];
            SIMD(VVADD, local_output_for_temp_sum, local_output_group_i, local_output_group_i);

        };
        
        use_local_output_i32 = local_output_i32[0:1, 0:1, 0:out_channel_len];
        use_global_output_i32 = global_output_i32[0:1, 0:1, out_channel_begin:out_channel_begin+out_channel_len];
        Trans(use_local_output_i32, use_global_output_i32);
        use_blank = local_blank[0:N_GROUP_VCOL];
        Trans(use_blank, use_local_output_i32);
    };
    // Trans(local_output_i8, global_output);
}