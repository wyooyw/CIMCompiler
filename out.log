Comments removed from file 
/home/wangyiou/project/cim_compiler_frontend/playground/.result/origin_code.cim
 and saved to 
/home/wangyiou/project/cim_compiler_frontend/playground/.result/precompile_1_remove_comment.cim
Macros replaced from file 
/home/wangyiou/project/cim_compiler_frontend/playground/.result/precompile_1_remove_comment.cim
 and saved to 
/home/wangyiou/project/cim_compiler_frontend/playground/.result/precompile_2_replace_macro.cim
ANTLR:Generate done!
ANTLR:Compile done!
read cim code from /home/wangyiou/project/cim_compiler_frontend/playground/.result/precompile.cim
write json to /home/wangyiou/project/cim_compiler_frontend/playground/.result/ast.json
ANTLR Down.
parse_func
parse_func_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_tensor
parse_shape
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_datatype
parse_device
Convert __INPUT_MEMORY__ to input_memory
is_tensor_args
is_scalar_args
is_tensor_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_tensor
parse_shape
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_datatype
parse_device
Convert __PIM_INPUT_REG_BUFFER__ to pim_input_reg_buffer
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
parse_func_body
parse_stmt_list
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d finish
parse_bulitin_slice offsets finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice sizes finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
3
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_trans
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_func_body finish.
parse_func finish.
parse_func
parse_func_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_tensor
parse_shape
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_datatype
parse_device
Convert __INPUT_MEMORY__ to input_memory
is_tensor_args
is_scalar_args
is_tensor_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_tensor
parse_shape
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_datatype
parse_device
Convert __PIM_INPUT_REG_BUFFER__ to pim_input_reg_buffer
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
parse_func_body
parse_stmt_list
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice offsets finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice sizes finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
3
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_min
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
is_for_stmt
parse_for_stmt
parse_for_range
parse_for_range_2
parse_const_or_var
is_const
is_var
parse_var
parse_const_or_var
is_const
is_var
parse_var
parse_for_range_2 finish
parse_range finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt_list
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice offsets finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice sizes finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
3
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d finish
parse_bulitin_slice offsets finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice sizes finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
3
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_trans
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt finish
parse_func_body finish.
parse_func finish.
parse_func
parse_func_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_tensor
parse_shape
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_datatype
parse_device
Convert __INPUT_MEMORY__ to input_memory
is_tensor_args
is_scalar_args
is_tensor_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_tensor
parse_shape
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_datatype
parse_device
Convert __PIM_INPUT_REG_BUFFER__ to pim_input_reg_buffer
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
parse_func_body
parse_stmt_list
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_call_param_list
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param_list finish
parse_call finish
parse_stmt finish
parse_func_body finish.
parse_func finish.
parse_func
parse_func_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_tensor
parse_shape
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_datatype
parse_device
Convert __INPUT_MEMORY__ to input_memory
is_tensor_args
is_scalar_args
is_tensor_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_tensor
parse_shape
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_datatype
parse_device
Convert __PIM_INPUT_REG_BUFFER__ to pim_input_reg_buffer
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
is_tensor_args
is_scalar_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
parse_func_body
parse_stmt_list
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
is_for_stmt
parse_for_stmt
unroll
parse_for_range
parse_for_range_1
parse_const_or_var
is_const
parse_const
parse_const finish
parse_for_range_1 finish
parse_range finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt_list
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice offsets finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice sizes finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
3
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_call_param_list
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param_list finish
parse_call finish
parse_stmt finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt finish
parse_func_body finish.
parse_func finish.
parse_func
parse_func_args
is_tensor_args
is_scalar_args
parse_tensor_type_and_name
parse_param_type
parse_param_type_scalar
parse_datatype
parse_func_body
parse_stmt_list
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_buffer
parse_datatype
parse_device
Convert __GLOBAL__ to global
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_buffer
parse_datatype
parse_device
Convert __GLOBAL__ to global
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_const_int
parse_const_int
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_buffer
parse_datatype
parse_device
Convert __GLOBAL__ to global
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_buffer
parse_datatype
parse_device
Convert __INPUT_MEMORY__ to input_memory
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_trans
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_buffer
parse_datatype
parse_device
Convert __OUTPUT_MEMORY__ to output_memory
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_buffer
parse_datatype
parse_device
Convert __OUTPUT_MEMORY__ to output_memory
parse_const_array1d
parse_const_int
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_buffer
parse_datatype
parse_device
Convert __PIM_INPUT_REG_BUFFER__ to pim_input_reg_buffer
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_buffer
parse_datatype
parse_device
Convert __PIM_OUTPUT_REG_BUFFER__ to pim_output_reg_buffer
parse_const_array1d
parse_const_int
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_buffer
parse_datatype
parse_device
Convert __MACRO__ to macro
parse_const_array1d
parse_const_int
parse_const_int
parse_const_int
parse_const_int
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_buffer
parse_datatype
parse_device
Convert __INPUT_MEMORY__ to input_memory
parse_const_array1d
parse_const_int
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_special_reg_set
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_special_reg_set
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_special_reg_set
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_special_reg_set
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_special_reg_set
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_special_reg_set
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_special_reg_set
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_special_reg_set
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_special_reg_set
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_special_reg_set
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
is_for_stmt
parse_for_stmt
parse_for_range
parse_for_range_3
parse_const_or_var
is_const
parse_const
parse_const finish
parse_const_or_var
is_const
parse_const
parse_const finish
parse_const_or_var
is_const
parse_const
parse_const finish
parse_for_range_3 finish
parse_range finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt_list
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_min
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
is_for_stmt
parse_for_stmt
parse_for_range
parse_for_range_3
parse_const_or_var
is_const
parse_const
parse_const finish
parse_const_or_var
is_const
parse_const
parse_const finish
parse_const_or_var
is_const
is_var
parse_var
parse_for_range_3 finish
parse_range finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt_list
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_min
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice offsets finish
5
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice sizes finish
5
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
5
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice offsets finish
4
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice sizes finish
4
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
4
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_trans
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_save
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
is_for_stmt
parse_for_stmt
parse_for_range
parse_for_range_3
parse_const_or_var
is_const
parse_const
parse_const finish
parse_const_or_var
is_const
parse_const
parse_const finish
parse_const_or_var
is_const
parse_const
parse_const finish
parse_for_range_3 finish
parse_range finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt_list
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
is_for_stmt
parse_for_stmt
parse_for_range
parse_for_range_3
parse_const_or_var
is_const
parse_const
parse_const finish
parse_const_or_var
is_const
parse_const
parse_const finish
parse_const_or_var
is_const
parse_const
parse_const finish
parse_for_range_3 finish
parse_range finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt_list
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_load
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_save
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice offsets finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice sizes finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
3
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_save
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_min
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
is_for_stmt
parse_for_stmt
parse_for_range
parse_for_range_3
parse_const_or_var
is_const
is_var
parse_var
parse_const_or_var
is_const
is_var
parse_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_for_range_3 finish
parse_range finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt_list
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_call_param_list
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_call_param_list finish
parse_call finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_min
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_load
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
is_for_stmt
parse_for_stmt
parse_for_range
parse_for_range_3
parse_const_or_var
is_const
parse_const
parse_const finish
parse_const_or_var
is_const
is_var
parse_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_for_range_3 finish
parse_range finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt_list
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_min
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice offsets finish
4
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice sizes finish
4
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
4
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d finish
parse_bulitin_slice offsets finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d finish
parse_bulitin_slice sizes finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
3
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_cimcompute
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_save
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_stmt finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_cimoutput
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
is_for_stmt
parse_for_stmt
parse_for_range
parse_for_range_1
parse_const_or_var
is_const
parse_const
parse_const finish
parse_for_range_1 finish
parse_range finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt_list
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice offsets finish
1
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice sizes finish
1
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
1
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_trans
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
parse_assign_stmt
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
is_call
parse_call_return_value
parse_bulitin_slice
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
is_binary_expr
parse_binary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_array_1d finish
parse_bulitin_slice offsets finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice sizes finish
3
parse_array_1d
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
parse_const
parse_const finish
parse_array_1d finish
parse_bulitin_slice strides finish
3
parse_bulitin_slice finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_vvadd
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt finish
parse_carry
parse_carry_list
parse_var
parse_carry_list finish
parse_carry finish
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_trans
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_trans
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_stmt
is_assign_stmt
is_return_stmt
is_call_stmt
parse_call_stmt
parse_call
parse_bulitin_trans
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_expr
is_unary_expr
parse_unary_expr
is_const_or_var
parse_const_or_var
is_const
is_var
parse_var
parse_stmt finish
parse_func_body finish.
parse_func finish.
module {
  func.func private @copy_input_to_input_buffer_icgt128(%arg0: i8, %arg1: memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, %arg2: memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, %arg3: index, %arg4: index, %arg5: index) {
    %c128 = arith.constant 128 : index
    %0 = arith.divsi %arg5, %c128 : index
    %c3 = arith.constant 3 : index
    %1 = arith.divsi %0, %c3 : index
    %c3_0 = arith.constant 3 : index
    %2 = arith.remsi %0, %c3_0 : index
    %3 = arith.addi %arg3, %1 : index
    %4 = arith.addi %arg4, %2 : index
    %c128_1 = arith.constant 128 : index
    %5 = arith.remsi %arg5, %c128_1 : index
    %c1 = arith.constant 1 : index
    %c1_2 = arith.constant 1 : index
    %c128_3 = arith.constant 128 : index
    %c1_4 = arith.constant 1 : index
    %c1_5 = arith.constant 1 : index
    %c1_6 = arith.constant 1 : index
    %subview = memref.subview %arg1[%3, %4, %5] [%c1, %c1_2, %c128_3] [%c1_4, %c1_5, %c1_6] : memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "input_memory"}>
    "cim.copy"(%subview, %arg2) : (memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "input_memory"}>, memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>) -> ()
    return
  }
  func.func private @copy_input_to_input_buffer_iclt128(%arg0: i8, %arg1: memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, %arg2: memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, %arg3: index, %arg4: index, %arg5: index) {
    %c0 = arith.constant 0 : index
    %c0_0 = arith.constant 0 : index
    %c0_1 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c1_2 = arith.constant 1 : index
    %c128 = arith.constant 128 : index
    %c1_3 = arith.constant 1 : index
    %c1_4 = arith.constant 1 : index
    %c1_5 = arith.constant 1 : index
    %subview = memref.subview %arg1[%c0, %c0_0, %c0_1] [%c1, %c1_2, %c128] [%c1_3, %c1_4, %c1_5] : memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "input_memory"}>
    %c128_6 = arith.constant 128 : index
    %c128_7 = arith.constant 128 : index
    %0 = arith.divsi %c128_6, %c128_7 : index
    %c3 = arith.constant 3 : index
    %c3_8 = arith.constant 3 : index
    %1 = arith.muli %c3, %c3_8 : index
    %c128_9 = arith.constant 128 : index
    %2 = arith.divsi %arg5, %c128_9 : index
    %3 = arith.addi %2, %0 : index
    %4 = arith.minsi %3, %1 : index
    %c1_10 = arith.constant 1 : index
    %5 = scf.for %arg6 = %2 to %4 step %c1_10 iter_args(%arg7 = %arg0) -> (i8) {
      %6 = arith.subi %arg6, %2 : index
      %c3_11 = arith.constant 3 : index
      %7 = arith.divsi %arg6, %c3_11 : index
      %c3_12 = arith.constant 3 : index
      %8 = arith.remsi %arg6, %c3_12 : index
      %9 = arith.addi %arg3, %7 : index
      %10 = arith.addi %arg4, %8 : index
      %c0_13 = arith.constant 0 : index
      %c1_14 = arith.constant 1 : index
      %c1_15 = arith.constant 1 : index
      %c128_16 = arith.constant 128 : index
      %c1_17 = arith.constant 1 : index
      %c1_18 = arith.constant 1 : index
      %c1_19 = arith.constant 1 : index
      %subview_20 = memref.subview %arg1[%9, %10, %c0_13] [%c1_14, %c1_15, %c128_16] [%c1_17, %c1_18, %c1_19] : memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "input_memory"}>
      %c128_21 = arith.constant 128 : index
      %11 = arith.muli %6, %c128_21 : index
      %c0_22 = arith.constant 0 : index
      %c0_23 = arith.constant 0 : index
      %c1_24 = arith.constant 1 : index
      %c1_25 = arith.constant 1 : index
      %c128_26 = arith.constant 128 : index
      %c1_27 = arith.constant 1 : index
      %c1_28 = arith.constant 1 : index
      %c1_29 = arith.constant 1 : index
      %subview_30 = memref.subview %arg2[%c0_22, %c0_23, %11] [%c1_24, %c1_25, %c128_26] [%c1_27, %c1_28, %c1_29] : memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
      "cim.copy"(%subview_20, %subview_30) : (memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "input_memory"}>, memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>) -> ()
      scf.yield %arg7 : i8
    }
    return
  }
  func.func private @copy_input_to_input_buffer(%arg0: i8, %arg1: memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, %arg2: memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, %arg3: index, %arg4: index, %arg5: index) {
    call @copy_input_to_input_buffer_icgt128(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5) : (i8, memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, index, index, index) -> ()
    return
  }
  func.func private @copy_input_to_input_buffer_for_all_group(%arg0: i8, %arg1: memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, %arg2: memref<1x4x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, %arg3: index, %arg4: index, %arg5: index) {
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c1 = arith.constant 1 : index
    %0 = scf.for %arg6 = %c0 to %c4 step %c1 iter_args(%arg7 = %arg0) -> (i8) {
      %c0_0 = arith.constant 0 : index
      %c0_1 = arith.constant 0 : index
      %c1_2 = arith.constant 1 : index
      %c1_3 = arith.constant 1 : index
      %c128 = arith.constant 128 : index
      %c1_4 = arith.constant 1 : index
      %c1_5 = arith.constant 1 : index
      %c1_6 = arith.constant 1 : index
      %subview = memref.subview %arg2[%c0_0, %arg6, %c0_1] [%c1_2, %c1_3, %c128] [%c1_4, %c1_5, %c1_6] : memref<1x4x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
      %c2 = arith.constant 2 : index
      %1 = arith.divsi %arg6, %c2 : index
      %c2_7 = arith.constant 2 : index
      %2 = arith.remsi %arg6, %c2_7 : index
      %3 = arith.addi %arg3, %1 : index
      %4 = arith.addi %arg4, %2 : index
      func.call @copy_input_to_input_buffer(%arg7, %arg1, %subview, %3, %4, %arg5) : (i8, memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, index, index, index) -> ()
      scf.yield %arg7 : i8
    }
    return
  }
  func.func @main(%arg0: i8) {
    %alloc = memref.alloc() : memref<8x8x128xi8, {address = -1 : i64, memory = "global"}>
    %alloc_0 = memref.alloc() : memref<2x72x16x4x32xi8, {address = -1 : i64, memory = "global"}>
    %alloc_1 = memref.alloc() : memref<6x6x64xi32, {address = -1 : i64, memory = "global"}>
    %alloc_2 = memref.alloc() : memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>
    "cim.copy"(%alloc, %alloc_2) : (memref<8x8x128xi8, {address = -1 : i64, memory = "global"}>, memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>) -> ()
    %alloc_3 = memref.alloc() : memref<6x6x64xi32, {address = -1 : i64, memory = "output_memory"}>
    %alloc_4 = memref.alloc() : memref<32xi32, {address = -1 : i64, memory = "output_memory"}>
    %alloc_5 = memref.alloc() : memref<2x4x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
    %alloc_6 = memref.alloc() : memref<1024xi32, {address = -1 : i64, memory = "pim_output_reg_buffer"}>
    %alloc_7 = memref.alloc() : memref<64x16x4x32xi8, {address = -1 : i64, memory = "macro"}>
    %alloc_8 = memref.alloc() : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
    %c0 = arith.constant 0 : index
    %c8 = arith.constant 8 : index
    "cim.special_reg_set"(%c0, %c8) : (index, index) -> ()
    %c2 = arith.constant 2 : index
    %c8_9 = arith.constant 8 : index
    "cim.special_reg_set"(%c2, %c8_9) : (index, index) -> ()
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    "cim.special_reg_set"(%c1, %c32) : (index, index) -> ()
    %c3 = arith.constant 3 : index
    %c16 = arith.constant 16 : index
    "cim.special_reg_set"(%c3, %c16) : (index, index) -> ()
    %c4 = arith.constant 4 : index
    %c4_10 = arith.constant 4 : index
    "cim.special_reg_set"(%c4, %c4_10) : (index, index) -> ()
    %c5 = arith.constant 5 : index
    %c32_11 = arith.constant 32 : index
    "cim.special_reg_set"(%c5, %c32_11) : (index, index) -> ()
    %c6 = arith.constant 6 : index
    %c128 = arith.constant 128 : index
    "cim.special_reg_set"(%c6, %c128) : (index, index) -> ()
    %c16_12 = arith.constant 16 : index
    %c32_13 = arith.constant 32 : index
    "cim.special_reg_set"(%c16_12, %c32_13) : (index, index) -> ()
    %c17 = arith.constant 17 : index
    %c32_14 = arith.constant 32 : index
    "cim.special_reg_set"(%c17, %c32_14) : (index, index) -> ()
    %c20 = arith.constant 20 : index
    %c32_15 = arith.constant 32 : index
    "cim.special_reg_set"(%c20, %c32_15) : (index, index) -> ()
    %c0_16 = arith.constant 0 : index
    %c64 = arith.constant 64 : index
    %c32_17 = arith.constant 32 : index
    %0 = scf.for %arg1 = %c0_16 to %c64 step %c32_17 iter_args(%arg2 = %arg0) -> (i8) {
      %c32_18 = arith.constant 32 : index
      %1 = arith.addi %arg1, %c32_18 : index
      %c64_19 = arith.constant 64 : index
      %2 = arith.minsi %1, %c64_19 : index
      %c32_20 = arith.constant 32 : index
      %3 = arith.divsi %arg1, %c32_20 : index
      %c64_21 = arith.constant 64 : index
      %c0_22 = arith.constant 0 : index
      %c72 = arith.constant 72 : index
      %4 = scf.for %arg3 = %c0_22 to %c72 step %c64_21 iter_args(%arg4 = %arg2) -> (i8) {
        %5 = arith.addi %arg3, %c64_21 : index
        %c72_23 = arith.constant 72 : index
        %6 = arith.minsi %5, %c72_23 : index
        %7 = arith.subi %6, %arg3 : index
        %c0_24 = arith.constant 0 : index
        %c0_25 = arith.constant 0 : index
        %c0_26 = arith.constant 0 : index
        %c1_27 = arith.constant 1 : index
        %c16_28 = arith.constant 16 : index
        %c4_29 = arith.constant 4 : index
        %c32_30 = arith.constant 32 : index
        %c1_31 = arith.constant 1 : index
        %c1_32 = arith.constant 1 : index
        %c1_33 = arith.constant 1 : index
        %c1_34 = arith.constant 1 : index
        %c1_35 = arith.constant 1 : index
        %subview = memref.subview %alloc_0[%3, %arg3, %c0_24, %c0_25, %c0_26] [%c1_27, %7, %c16_28, %c4_29, %c32_30] [%c1_31, %c1_32, %c1_33, %c1_34, %c1_35] : memref<2x72x16x4x32xi8, {address = -1 : i64, memory = "global"}> to memref<?x?x?x?x?xi8, strided<[?, ?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "global"}>
        %c0_36 = arith.constant 0 : index
        %c0_37 = arith.constant 0 : index
        %c0_38 = arith.constant 0 : index
        %c0_39 = arith.constant 0 : index
        %c16_40 = arith.constant 16 : index
        %c4_41 = arith.constant 4 : index
        %c32_42 = arith.constant 32 : index
        %c1_43 = arith.constant 1 : index
        %c1_44 = arith.constant 1 : index
        %c1_45 = arith.constant 1 : index
        %c1_46 = arith.constant 1 : index
        %subview_47 = memref.subview %alloc_7[%c0_36, %c0_37, %c0_38, %c0_39] [%7, %c16_40, %c4_41, %c32_42] [%c1_43, %c1_44, %c1_45, %c1_46] : memref<64x16x4x32xi8, {address = -1 : i64, memory = "macro"}> to memref<?x?x?x?xi8, strided<[?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "macro"}>
        "cim.copy"(%subview, %subview_47) : (memref<?x?x?x?x?xi8, strided<[?, ?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "global"}>, memref<?x?x?x?xi8, strided<[?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "macro"}>) -> ()
        %c1_48 = arith.constant 1 : index
        %c0_49 = arith.constant 0 : index
        memref.store %c1_48, %alloc_8[%c0_49] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
        %c0_50 = arith.constant 0 : index
        %c6_51 = arith.constant 6 : index
        %c2_52 = arith.constant 2 : index
        %8 = scf.for %arg5 = %c0_50 to %c6_51 step %c2_52 iter_args(%arg6 = %arg4) -> (i8) {
          %c0_53 = arith.constant 0 : index
          %c6_54 = arith.constant 6 : index
          %c2_55 = arith.constant 2 : index
          %9 = scf.for %arg7 = %c0_53 to %c6_54 step %c2_55 iter_args(%arg8 = %arg6) -> (i8) {
            %c0_56 = arith.constant 0 : index
            %10 = memref.load %alloc_8[%c0_56] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
            %c1_57 = arith.constant 1 : index
            %11 = arith.subi %c1_57, %10 : index
            %c0_58 = arith.constant 0 : index
            memref.store %11, %alloc_8[%c0_58] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
            %c0_59 = arith.constant 0 : index
            %c0_60 = arith.constant 0 : index
            %c1_61 = arith.constant 1 : index
            %c4_62 = arith.constant 4 : index
            %c128_63 = arith.constant 128 : index
            %c1_64 = arith.constant 1 : index
            %c1_65 = arith.constant 1 : index
            %c1_66 = arith.constant 1 : index
            %subview_67 = memref.subview %alloc_5[%11, %c0_59, %c0_60] [%c1_61, %c4_62, %c128_63] [%c1_64, %c1_65, %c1_66] : memref<2x4x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
            %c3_68 = arith.constant 3 : index
            %c3_69 = arith.constant 3 : index
            %12 = arith.muli %c3_68, %c3_69 : index
            %c128_70 = arith.constant 128 : index
            %13 = arith.muli %12, %c128_70 : index
            %c0_71 = arith.constant 0 : index
            %c1_72 = arith.constant 1 : index
            memref.store %c0_71, %alloc_8[%c1_72] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
            %c16_73 = arith.constant 16 : index
            %14 = arith.muli %arg3, %c16_73 : index
            %c64_74 = arith.constant 64 : index
            %c16_75 = arith.constant 16 : index
            %15 = arith.muli %c64_74, %c16_75 : index
            %16 = arith.addi %14, %15 : index
            %17 = arith.minsi %13, %16 : index
            %c128_76 = arith.constant 128 : index
            %18 = scf.for %arg9 = %14 to %17 step %c128_76 iter_args(%arg10 = %arg8) -> (i8) {
              func.call @copy_input_to_input_buffer_for_all_group(%arg10, %alloc_2, %subview_67, %arg5, %arg7, %arg9) : (i8, memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, index, index, index) -> ()
              %20 = arith.subi %13, %arg9 : index
              %c128_80 = arith.constant 128 : index
              %21 = arith.minsi %20, %c128_80 : index
              %c1_81 = arith.constant 1 : index
              %22 = memref.load %alloc_8[%c1_81] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
              %c0_82 = arith.constant 0 : index
              %c16_83 = arith.constant 16 : index
              %23 = scf.for %arg11 = %c0_82 to %21 step %c16_83 iter_args(%arg12 = %22) -> (index) {
                %c16_85 = arith.constant 16 : index
                %24 = arith.addi %arg11, %c16_85 : index
                %25 = arith.minsi %24, %21 : index
                %26 = arith.subi %25, %arg11 : index
                %c0_86 = arith.constant 0 : index
                %c0_87 = arith.constant 0 : index
                %c0_88 = arith.constant 0 : index
                %c1_89 = arith.constant 1 : index
                %c16_90 = arith.constant 16 : index
                %c4_91 = arith.constant 4 : index
                %c32_92 = arith.constant 32 : index
                %c1_93 = arith.constant 1 : index
                %c1_94 = arith.constant 1 : index
                %c1_95 = arith.constant 1 : index
                %c1_96 = arith.constant 1 : index
                %subview_97 = memref.subview %subview_47[%arg12, %c0_86, %c0_87, %c0_88] [%c1_89, %c16_90, %c4_91, %c32_92] [%c1_93, %c1_94, %c1_95, %c1_96] : memref<?x?x?x?xi8, strided<[?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "macro"}> to memref<?x?x?x?xi8, strided<[?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "macro"}>
                %c0_98 = arith.constant 0 : index
                %c0_99 = arith.constant 0 : index
                %c1_100 = arith.constant 1 : index
                %c4_101 = arith.constant 4 : index
                %c1_102 = arith.constant 1 : index
                %c1_103 = arith.constant 1 : index
                %c1_104 = arith.constant 1 : index
                %subview_105 = memref.subview %subview_67[%c0_98, %c0_99, %arg11] [%c1_100, %c4_101, %26] [%c1_102, %c1_103, %c1_104] : memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
                "cim.cim_compute"(%subview_105, %subview_97, %alloc_6) <{bit_sparse_flag = false, value_sparse_flag = false}> : (memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, memref<?x?x?x?xi8, strided<[?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "macro"}>, memref<1024xi32, {address = -1 : i64, memory = "pim_output_reg_buffer"}>) -> ()
                %c1_106 = arith.constant 1 : index
                %27 = arith.addi %arg12, %c1_106 : index
                scf.yield %27 : index
              }
              %c1_84 = arith.constant 1 : index
              memref.store %23, %alloc_8[%c1_84] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
              scf.yield %arg10 : i8
            }
            "cim.cim_output"(%alloc_6) : (memref<1024xi32, {address = -1 : i64, memory = "pim_output_reg_buffer"}>) -> ()
            %c0_77 = arith.constant 0 : index
            %c4_78 = arith.constant 4 : index
            %c1_79 = arith.constant 1 : index
            %19 = scf.for %arg9 = %c0_77 to %c4_78 step %c1_79 iter_args(%arg10 = %18) -> (i8) {
              %c32_80 = arith.constant 32 : index
              %20 = arith.muli %arg9, %c32_80 : index
              %c32_81 = arith.constant 32 : index
              %c1_82 = arith.constant 1 : index
              %subview_83 = memref.subview %alloc_6[%20] [%c32_81] [%c1_82] : memref<1024xi32, {address = -1 : i64, memory = "pim_output_reg_buffer"}> to memref<?xi32, strided<[?], offset: ?>, {address = -1 : i64, memory = "pim_output_reg_buffer"}>
              %c2_84 = arith.constant 2 : index
              %21 = arith.divsi %arg9, %c2_84 : index
              %c2_85 = arith.constant 2 : index
              %22 = arith.remsi %arg9, %c2_85 : index
              "cim.copy"(%subview_83, %alloc_4) : (memref<?xi32, strided<[?], offset: ?>, {address = -1 : i64, memory = "pim_output_reg_buffer"}>, memref<32xi32, {address = -1 : i64, memory = "output_memory"}>) -> ()
              %23 = arith.addi %arg5, %21 : index
              %24 = arith.addi %arg7, %22 : index
              %c1_86 = arith.constant 1 : index
              %c1_87 = arith.constant 1 : index
              %c32_88 = arith.constant 32 : index
              %c1_89 = arith.constant 1 : index
              %c1_90 = arith.constant 1 : index
              %c1_91 = arith.constant 1 : index
              %subview_92 = memref.subview %alloc_3[%23, %24, %arg1] [%c1_86, %c1_87, %c32_88] [%c1_89, %c1_90, %c1_91] : memref<6x6x64xi32, {address = -1 : i64, memory = "output_memory"}> to memref<?x?x?xi32, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "output_memory"}>
              "cim.vv_add"(%alloc_4, %subview_92, %subview_92) : (memref<32xi32, {address = -1 : i64, memory = "output_memory"}>, memref<?x?x?xi32, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "output_memory"}>, memref<?x?x?xi32, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "output_memory"}>) -> ()
              scf.yield %arg10 : i8
            }
            scf.yield %19 : i8
          }
          scf.yield %9 : i8
        }
        scf.yield %8 : i8
      }
      scf.yield %4 : i8
    }
    "cim.copy"(%alloc_3, %alloc_1) : (memref<6x6x64xi32, {address = -1 : i64, memory = "output_memory"}>, memref<6x6x64xi32, {address = -1 : i64, memory = "global"}>) -> ()
    "cim.copy"(%alloc, %alloc) : (memref<8x8x128xi8, {address = -1 : i64, memory = "global"}>, memref<8x8x128xi8, {address = -1 : i64, memory = "global"}>) -> ()
    "cim.copy"(%alloc_0, %alloc_0) : (memref<2x72x16x4x32xi8, {address = -1 : i64, memory = "global"}>, memref<2x72x16x4x32xi8, {address = -1 : i64, memory = "global"}>) -> ()
    return
  }
}





createLoopUnrollPass
LoopUnrollPass begin.
LoopUnrollPass end. fail: 0 total: 1
Unroll Passes success.
module {
  func.func private @copy_input_to_input_buffer_icgt128(%arg0: i8, %arg1: memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, %arg2: memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, %arg3: index, %arg4: index, %arg5: index) {
    %c128 = arith.constant 128 : index
    %0 = arith.divsi %arg5, %c128 : index
    %c3 = arith.constant 3 : index
    %1 = arith.divsi %0, %c3 : index
    %c3_0 = arith.constant 3 : index
    %2 = arith.remsi %0, %c3_0 : index
    %3 = arith.addi %arg3, %1 : index
    %4 = arith.addi %arg4, %2 : index
    %c128_1 = arith.constant 128 : index
    %5 = arith.remsi %arg5, %c128_1 : index
    %c1 = arith.constant 1 : index
    %c1_2 = arith.constant 1 : index
    %c128_3 = arith.constant 128 : index
    %c1_4 = arith.constant 1 : index
    %c1_5 = arith.constant 1 : index
    %c1_6 = arith.constant 1 : index
    %subview = memref.subview %arg1[%3, %4, %5] [%c1, %c1_2, %c128_3] [%c1_4, %c1_5, %c1_6] : memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "input_memory"}>
    "cim.copy"(%subview, %arg2) : (memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "input_memory"}>, memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>) -> ()
    return
  }
  func.func private @copy_input_to_input_buffer_iclt128(%arg0: i8, %arg1: memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, %arg2: memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, %arg3: index, %arg4: index, %arg5: index) {
    %c0 = arith.constant 0 : index
    %c0_0 = arith.constant 0 : index
    %c0_1 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c1_2 = arith.constant 1 : index
    %c128 = arith.constant 128 : index
    %c1_3 = arith.constant 1 : index
    %c1_4 = arith.constant 1 : index
    %c1_5 = arith.constant 1 : index
    %subview = memref.subview %arg1[%c0, %c0_0, %c0_1] [%c1, %c1_2, %c128] [%c1_3, %c1_4, %c1_5] : memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "input_memory"}>
    %c128_6 = arith.constant 128 : index
    %c128_7 = arith.constant 128 : index
    %0 = arith.divsi %c128_6, %c128_7 : index
    %c3 = arith.constant 3 : index
    %c3_8 = arith.constant 3 : index
    %1 = arith.muli %c3, %c3_8 : index
    %c128_9 = arith.constant 128 : index
    %2 = arith.divsi %arg5, %c128_9 : index
    %3 = arith.addi %2, %0 : index
    %4 = arith.minsi %3, %1 : index
    %c1_10 = arith.constant 1 : index
    %5 = scf.for %arg6 = %2 to %4 step %c1_10 iter_args(%arg7 = %arg0) -> (i8) {
      %6 = arith.subi %arg6, %2 : index
      %c3_11 = arith.constant 3 : index
      %7 = arith.divsi %arg6, %c3_11 : index
      %c3_12 = arith.constant 3 : index
      %8 = arith.remsi %arg6, %c3_12 : index
      %9 = arith.addi %arg3, %7 : index
      %10 = arith.addi %arg4, %8 : index
      %c0_13 = arith.constant 0 : index
      %c1_14 = arith.constant 1 : index
      %c1_15 = arith.constant 1 : index
      %c128_16 = arith.constant 128 : index
      %c1_17 = arith.constant 1 : index
      %c1_18 = arith.constant 1 : index
      %c1_19 = arith.constant 1 : index
      %subview_20 = memref.subview %arg1[%9, %10, %c0_13] [%c1_14, %c1_15, %c128_16] [%c1_17, %c1_18, %c1_19] : memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "input_memory"}>
      %c128_21 = arith.constant 128 : index
      %11 = arith.muli %6, %c128_21 : index
      %c0_22 = arith.constant 0 : index
      %c0_23 = arith.constant 0 : index
      %c1_24 = arith.constant 1 : index
      %c1_25 = arith.constant 1 : index
      %c128_26 = arith.constant 128 : index
      %c1_27 = arith.constant 1 : index
      %c1_28 = arith.constant 1 : index
      %c1_29 = arith.constant 1 : index
      %subview_30 = memref.subview %arg2[%c0_22, %c0_23, %11] [%c1_24, %c1_25, %c128_26] [%c1_27, %c1_28, %c1_29] : memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
      "cim.copy"(%subview_20, %subview_30) : (memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "input_memory"}>, memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>) -> ()
      scf.yield %arg7 : i8
    }
    return
  }
  func.func private @copy_input_to_input_buffer(%arg0: i8, %arg1: memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, %arg2: memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, %arg3: index, %arg4: index, %arg5: index) {
    call @copy_input_to_input_buffer_icgt128(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5) : (i8, memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, memref<1x1x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, index, index, index) -> ()
    return
  }
  func.func private @copy_input_to_input_buffer_for_all_group(%arg0: i8, %arg1: memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, %arg2: memref<1x4x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, %arg3: index, %arg4: index, %arg5: index) {
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c1 = arith.constant 1 : index
    %c4_0 = arith.constant 4 : index
    %c0_1 = arith.constant 0 : index
    %c0_2 = arith.constant 0 : index
    %c1_3 = arith.constant 1 : index
    %c1_4 = arith.constant 1 : index
    %c128 = arith.constant 128 : index
    %c1_5 = arith.constant 1 : index
    %c1_6 = arith.constant 1 : index
    %c1_7 = arith.constant 1 : index
    %subview = memref.subview %arg2[%c0_1, %c0, %c0_2] [%c1_3, %c1_4, %c128] [%c1_5, %c1_6, %c1_7] : memref<1x4x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
    %c2 = arith.constant 2 : index
    %0 = arith.divsi %c0, %c2 : index
    %c2_8 = arith.constant 2 : index
    %1 = arith.remsi %c0, %c2_8 : index
    %2 = arith.addi %arg3, %0 : index
    %3 = arith.addi %arg4, %1 : index
    call @copy_input_to_input_buffer(%arg0, %arg1, %subview, %2, %3, %arg5) : (i8, memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, index, index, index) -> ()
    %c1_9 = arith.constant 1 : index
    %4 = arith.muli %c1, %c1_9 : index
    %5 = arith.addi %c0, %4 : index
    %c0_10 = arith.constant 0 : index
    %c0_11 = arith.constant 0 : index
    %c1_12 = arith.constant 1 : index
    %c1_13 = arith.constant 1 : index
    %c128_14 = arith.constant 128 : index
    %c1_15 = arith.constant 1 : index
    %c1_16 = arith.constant 1 : index
    %c1_17 = arith.constant 1 : index
    %subview_18 = memref.subview %arg2[%c0_10, %5, %c0_11] [%c1_12, %c1_13, %c128_14] [%c1_15, %c1_16, %c1_17] : memref<1x4x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
    %c2_19 = arith.constant 2 : index
    %6 = arith.divsi %5, %c2_19 : index
    %c2_20 = arith.constant 2 : index
    %7 = arith.remsi %5, %c2_20 : index
    %8 = arith.addi %arg3, %6 : index
    %9 = arith.addi %arg4, %7 : index
    call @copy_input_to_input_buffer(%arg0, %arg1, %subview_18, %8, %9, %arg5) : (i8, memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, index, index, index) -> ()
    %c2_21 = arith.constant 2 : index
    %10 = arith.muli %c1, %c2_21 : index
    %11 = arith.addi %c0, %10 : index
    %c0_22 = arith.constant 0 : index
    %c0_23 = arith.constant 0 : index
    %c1_24 = arith.constant 1 : index
    %c1_25 = arith.constant 1 : index
    %c128_26 = arith.constant 128 : index
    %c1_27 = arith.constant 1 : index
    %c1_28 = arith.constant 1 : index
    %c1_29 = arith.constant 1 : index
    %subview_30 = memref.subview %arg2[%c0_22, %11, %c0_23] [%c1_24, %c1_25, %c128_26] [%c1_27, %c1_28, %c1_29] : memref<1x4x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
    %c2_31 = arith.constant 2 : index
    %12 = arith.divsi %11, %c2_31 : index
    %c2_32 = arith.constant 2 : index
    %13 = arith.remsi %11, %c2_32 : index
    %14 = arith.addi %arg3, %12 : index
    %15 = arith.addi %arg4, %13 : index
    call @copy_input_to_input_buffer(%arg0, %arg1, %subview_30, %14, %15, %arg5) : (i8, memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, index, index, index) -> ()
    %c3 = arith.constant 3 : index
    %16 = arith.muli %c1, %c3 : index
    %17 = arith.addi %c0, %16 : index
    %c0_33 = arith.constant 0 : index
    %c0_34 = arith.constant 0 : index
    %c1_35 = arith.constant 1 : index
    %c1_36 = arith.constant 1 : index
    %c128_37 = arith.constant 128 : index
    %c1_38 = arith.constant 1 : index
    %c1_39 = arith.constant 1 : index
    %c1_40 = arith.constant 1 : index
    %subview_41 = memref.subview %arg2[%c0_33, %17, %c0_34] [%c1_35, %c1_36, %c128_37] [%c1_38, %c1_39, %c1_40] : memref<1x4x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
    %c2_42 = arith.constant 2 : index
    %18 = arith.divsi %17, %c2_42 : index
    %c2_43 = arith.constant 2 : index
    %19 = arith.remsi %17, %c2_43 : index
    %20 = arith.addi %arg3, %18 : index
    %21 = arith.addi %arg4, %19 : index
    call @copy_input_to_input_buffer(%arg0, %arg1, %subview_41, %20, %21, %arg5) : (i8, memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, index, index, index) -> ()
    return
  }
  func.func @main(%arg0: i8) {
    %alloc = memref.alloc() : memref<8x8x128xi8, {address = -1 : i64, memory = "global"}>
    %alloc_0 = memref.alloc() : memref<2x72x16x4x32xi8, {address = -1 : i64, memory = "global"}>
    %alloc_1 = memref.alloc() : memref<6x6x64xi32, {address = -1 : i64, memory = "global"}>
    %alloc_2 = memref.alloc() : memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>
    "cim.copy"(%alloc, %alloc_2) : (memref<8x8x128xi8, {address = -1 : i64, memory = "global"}>, memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>) -> ()
    %alloc_3 = memref.alloc() : memref<6x6x64xi32, {address = -1 : i64, memory = "output_memory"}>
    %alloc_4 = memref.alloc() : memref<32xi32, {address = -1 : i64, memory = "output_memory"}>
    %alloc_5 = memref.alloc() : memref<2x4x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
    %alloc_6 = memref.alloc() : memref<1024xi32, {address = -1 : i64, memory = "pim_output_reg_buffer"}>
    %alloc_7 = memref.alloc() : memref<64x16x4x32xi8, {address = -1 : i64, memory = "macro"}>
    %alloc_8 = memref.alloc() : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
    %c0 = arith.constant 0 : index
    %c8 = arith.constant 8 : index
    "cim.special_reg_set"(%c0, %c8) : (index, index) -> ()
    %c2 = arith.constant 2 : index
    %c8_9 = arith.constant 8 : index
    "cim.special_reg_set"(%c2, %c8_9) : (index, index) -> ()
    %c1 = arith.constant 1 : index
    %c32 = arith.constant 32 : index
    "cim.special_reg_set"(%c1, %c32) : (index, index) -> ()
    %c3 = arith.constant 3 : index
    %c16 = arith.constant 16 : index
    "cim.special_reg_set"(%c3, %c16) : (index, index) -> ()
    %c4 = arith.constant 4 : index
    %c4_10 = arith.constant 4 : index
    "cim.special_reg_set"(%c4, %c4_10) : (index, index) -> ()
    %c5 = arith.constant 5 : index
    %c32_11 = arith.constant 32 : index
    "cim.special_reg_set"(%c5, %c32_11) : (index, index) -> ()
    %c6 = arith.constant 6 : index
    %c128 = arith.constant 128 : index
    "cim.special_reg_set"(%c6, %c128) : (index, index) -> ()
    %c16_12 = arith.constant 16 : index
    %c32_13 = arith.constant 32 : index
    "cim.special_reg_set"(%c16_12, %c32_13) : (index, index) -> ()
    %c17 = arith.constant 17 : index
    %c32_14 = arith.constant 32 : index
    "cim.special_reg_set"(%c17, %c32_14) : (index, index) -> ()
    %c20 = arith.constant 20 : index
    %c32_15 = arith.constant 32 : index
    "cim.special_reg_set"(%c20, %c32_15) : (index, index) -> ()
    %c0_16 = arith.constant 0 : index
    %c64 = arith.constant 64 : index
    %c32_17 = arith.constant 32 : index
    %0 = scf.for %arg1 = %c0_16 to %c64 step %c32_17 iter_args(%arg2 = %arg0) -> (i8) {
      %c32_18 = arith.constant 32 : index
      %1 = arith.addi %arg1, %c32_18 : index
      %c64_19 = arith.constant 64 : index
      %2 = arith.minsi %1, %c64_19 : index
      %c32_20 = arith.constant 32 : index
      %3 = arith.divsi %arg1, %c32_20 : index
      %c64_21 = arith.constant 64 : index
      %c0_22 = arith.constant 0 : index
      %c72 = arith.constant 72 : index
      %4 = scf.for %arg3 = %c0_22 to %c72 step %c64_21 iter_args(%arg4 = %arg2) -> (i8) {
        %5 = arith.addi %arg3, %c64_21 : index
        %c72_23 = arith.constant 72 : index
        %6 = arith.minsi %5, %c72_23 : index
        %7 = arith.subi %6, %arg3 : index
        %c0_24 = arith.constant 0 : index
        %c0_25 = arith.constant 0 : index
        %c0_26 = arith.constant 0 : index
        %c1_27 = arith.constant 1 : index
        %c16_28 = arith.constant 16 : index
        %c4_29 = arith.constant 4 : index
        %c32_30 = arith.constant 32 : index
        %c1_31 = arith.constant 1 : index
        %c1_32 = arith.constant 1 : index
        %c1_33 = arith.constant 1 : index
        %c1_34 = arith.constant 1 : index
        %c1_35 = arith.constant 1 : index
        %subview = memref.subview %alloc_0[%3, %arg3, %c0_24, %c0_25, %c0_26] [%c1_27, %7, %c16_28, %c4_29, %c32_30] [%c1_31, %c1_32, %c1_33, %c1_34, %c1_35] : memref<2x72x16x4x32xi8, {address = -1 : i64, memory = "global"}> to memref<?x?x?x?x?xi8, strided<[?, ?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "global"}>
        %c0_36 = arith.constant 0 : index
        %c0_37 = arith.constant 0 : index
        %c0_38 = arith.constant 0 : index
        %c0_39 = arith.constant 0 : index
        %c16_40 = arith.constant 16 : index
        %c4_41 = arith.constant 4 : index
        %c32_42 = arith.constant 32 : index
        %c1_43 = arith.constant 1 : index
        %c1_44 = arith.constant 1 : index
        %c1_45 = arith.constant 1 : index
        %c1_46 = arith.constant 1 : index
        %subview_47 = memref.subview %alloc_7[%c0_36, %c0_37, %c0_38, %c0_39] [%7, %c16_40, %c4_41, %c32_42] [%c1_43, %c1_44, %c1_45, %c1_46] : memref<64x16x4x32xi8, {address = -1 : i64, memory = "macro"}> to memref<?x?x?x?xi8, strided<[?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "macro"}>
        "cim.copy"(%subview, %subview_47) : (memref<?x?x?x?x?xi8, strided<[?, ?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "global"}>, memref<?x?x?x?xi8, strided<[?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "macro"}>) -> ()
        %c1_48 = arith.constant 1 : index
        %c0_49 = arith.constant 0 : index
        memref.store %c1_48, %alloc_8[%c0_49] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
        %c0_50 = arith.constant 0 : index
        %c6_51 = arith.constant 6 : index
        %c2_52 = arith.constant 2 : index
        %8 = scf.for %arg5 = %c0_50 to %c6_51 step %c2_52 iter_args(%arg6 = %arg4) -> (i8) {
          %c0_53 = arith.constant 0 : index
          %c6_54 = arith.constant 6 : index
          %c2_55 = arith.constant 2 : index
          %9 = scf.for %arg7 = %c0_53 to %c6_54 step %c2_55 iter_args(%arg8 = %arg6) -> (i8) {
            %c0_56 = arith.constant 0 : index
            %10 = memref.load %alloc_8[%c0_56] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
            %c1_57 = arith.constant 1 : index
            %11 = arith.subi %c1_57, %10 : index
            %c0_58 = arith.constant 0 : index
            memref.store %11, %alloc_8[%c0_58] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
            %c0_59 = arith.constant 0 : index
            %c0_60 = arith.constant 0 : index
            %c1_61 = arith.constant 1 : index
            %c4_62 = arith.constant 4 : index
            %c128_63 = arith.constant 128 : index
            %c1_64 = arith.constant 1 : index
            %c1_65 = arith.constant 1 : index
            %c1_66 = arith.constant 1 : index
            %subview_67 = memref.subview %alloc_5[%11, %c0_59, %c0_60] [%c1_61, %c4_62, %c128_63] [%c1_64, %c1_65, %c1_66] : memref<2x4x128xi8, {address = -1 : i64, memory = "pim_input_reg_buffer"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
            %c3_68 = arith.constant 3 : index
            %c3_69 = arith.constant 3 : index
            %12 = arith.muli %c3_68, %c3_69 : index
            %c128_70 = arith.constant 128 : index
            %13 = arith.muli %12, %c128_70 : index
            %c0_71 = arith.constant 0 : index
            %c1_72 = arith.constant 1 : index
            memref.store %c0_71, %alloc_8[%c1_72] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
            %c16_73 = arith.constant 16 : index
            %14 = arith.muli %arg3, %c16_73 : index
            %c64_74 = arith.constant 64 : index
            %c16_75 = arith.constant 16 : index
            %15 = arith.muli %c64_74, %c16_75 : index
            %16 = arith.addi %14, %15 : index
            %17 = arith.minsi %13, %16 : index
            %c128_76 = arith.constant 128 : index
            %18 = scf.for %arg9 = %14 to %17 step %c128_76 iter_args(%arg10 = %arg8) -> (i8) {
              func.call @copy_input_to_input_buffer_for_all_group(%arg10, %alloc_2, %subview_67, %arg5, %arg7, %arg9) : (i8, memref<8x8x128xi8, {address = -1 : i64, memory = "input_memory"}>, memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, index, index, index) -> ()
              %20 = arith.subi %13, %arg9 : index
              %c128_80 = arith.constant 128 : index
              %21 = arith.minsi %20, %c128_80 : index
              %c1_81 = arith.constant 1 : index
              %22 = memref.load %alloc_8[%c1_81] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
              %c0_82 = arith.constant 0 : index
              %c16_83 = arith.constant 16 : index
              %23 = scf.for %arg11 = %c0_82 to %21 step %c16_83 iter_args(%arg12 = %22) -> (index) {
                %c16_85 = arith.constant 16 : index
                %24 = arith.addi %arg11, %c16_85 : index
                %25 = arith.minsi %24, %21 : index
                %26 = arith.subi %25, %arg11 : index
                %c0_86 = arith.constant 0 : index
                %c0_87 = arith.constant 0 : index
                %c0_88 = arith.constant 0 : index
                %c1_89 = arith.constant 1 : index
                %c16_90 = arith.constant 16 : index
                %c4_91 = arith.constant 4 : index
                %c32_92 = arith.constant 32 : index
                %c1_93 = arith.constant 1 : index
                %c1_94 = arith.constant 1 : index
                %c1_95 = arith.constant 1 : index
                %c1_96 = arith.constant 1 : index
                %subview_97 = memref.subview %subview_47[%arg12, %c0_86, %c0_87, %c0_88] [%c1_89, %c16_90, %c4_91, %c32_92] [%c1_93, %c1_94, %c1_95, %c1_96] : memref<?x?x?x?xi8, strided<[?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "macro"}> to memref<?x?x?x?xi8, strided<[?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "macro"}>
                %c0_98 = arith.constant 0 : index
                %c0_99 = arith.constant 0 : index
                %c1_100 = arith.constant 1 : index
                %c4_101 = arith.constant 4 : index
                %c1_102 = arith.constant 1 : index
                %c1_103 = arith.constant 1 : index
                %c1_104 = arith.constant 1 : index
                %subview_105 = memref.subview %subview_67[%c0_98, %c0_99, %arg11] [%c1_100, %c4_101, %26] [%c1_102, %c1_103, %c1_104] : memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}> to memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
                "cim.cim_compute"(%subview_105, %subview_97, %alloc_6) <{bit_sparse_flag = false, value_sparse_flag = false}> : (memref<?x?x?xi8, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, memref<?x?x?x?xi8, strided<[?, ?, ?, ?], offset: ?>, {address = -1 : i64, memory = "macro"}>, memref<1024xi32, {address = -1 : i64, memory = "pim_output_reg_buffer"}>) -> ()
                %c1_106 = arith.constant 1 : index
                %27 = arith.addi %arg12, %c1_106 : index
                scf.yield %27 : index
              }
              %c1_84 = arith.constant 1 : index
              memref.store %23, %alloc_8[%c1_84] : memref<4xindex, {address = -1 : i64, memory = "input_memory"}>
              scf.yield %arg10 : i8
            }
            "cim.cim_output"(%alloc_6) : (memref<1024xi32, {address = -1 : i64, memory = "pim_output_reg_buffer"}>) -> ()
            %c0_77 = arith.constant 0 : index
            %c4_78 = arith.constant 4 : index
            %c1_79 = arith.constant 1 : index
            %19 = scf.for %arg9 = %c0_77 to %c4_78 step %c1_79 iter_args(%arg10 = %18) -> (i8) {
              %c32_80 = arith.constant 32 : index
              %20 = arith.muli %arg9, %c32_80 : index
              %c32_81 = arith.constant 32 : index
              %c1_82 = arith.constant 1 : index
              %subview_83 = memref.subview %alloc_6[%20] [%c32_81] [%c1_82] : memref<1024xi32, {address = -1 : i64, memory = "pim_output_reg_buffer"}> to memref<?xi32, strided<[?], offset: ?>, {address = -1 : i64, memory = "pim_output_reg_buffer"}>
              %c2_84 = arith.constant 2 : index
              %21 = arith.divsi %arg9, %c2_84 : index
              %c2_85 = arith.constant 2 : index
              %22 = arith.remsi %arg9, %c2_85 : index
              "cim.copy"(%subview_83, %alloc_4) : (memref<?xi32, strided<[?], offset: ?>, {address = -1 : i64, memory = "pim_output_reg_buffer"}>, memref<32xi32, {address = -1 : i64, memory = "output_memory"}>) -> ()
              %23 = arith.addi %arg5, %21 : index
              %24 = arith.addi %arg7, %22 : index
              %c1_86 = arith.constant 1 : index
              %c1_87 = arith.constant 1 : index
              %c32_88 = arith.constant 32 : index
              %c1_89 = arith.constant 1 : index
              %c1_90 = arith.constant 1 : index
              %c1_91 = arith.constant 1 : index
              %subview_92 = memref.subview %alloc_3[%23, %24, %arg1] [%c1_86, %c1_87, %c32_88] [%c1_89, %c1_90, %c1_91] : memref<6x6x64xi32, {address = -1 : i64, memory = "output_memory"}> to memref<?x?x?xi32, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "output_memory"}>
              "cim.vv_add"(%alloc_4, %subview_92, %subview_92) : (memref<32xi32, {address = -1 : i64, memory = "output_memory"}>, memref<?x?x?xi32, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "output_memory"}>, memref<?x?x?xi32, strided<[?, ?, ?], offset: ?>, {address = -1 : i64, memory = "output_memory"}>) -> ()
              scf.yield %arg10 : i8
            }
            scf.yield %19 : i8
          }
          scf.yield %9 : i8
        }
        scf.yield %8 : i8
      }
      scf.yield %4 : i8
    }
    "cim.copy"(%alloc_3, %alloc_1) : (memref<6x6x64xi32, {address = -1 : i64, memory = "output_memory"}>, memref<6x6x64xi32, {address = -1 : i64, memory = "global"}>) -> ()
    "cim.copy"(%alloc, %alloc) : (memref<8x8x128xi8, {address = -1 : i64, memory = "global"}>, memref<8x8x128xi8, {address = -1 : i64, memory = "global"}>) -> ()
    "cim.copy"(%alloc_0, %alloc_0) : (memref<2x72x16x4x32xi8, {address = -1 : i64, memory = "global"}>, memref<2x72x16x4x32xi8, {address = -1 : i64, memory = "global"}>) -> ()
    return
  }
}





VVAddOp::getCanonicalizationPatterns
ShapeOp::getCanonicalizationPatterns
CastOp::getCanonicalizationPatterns
doInlining
inlineSCC
VVAddOp::getCanonicalizationPatterns
ShapeOp::getCanonicalizationPatterns
CastOp::getCanonicalizationPatterns
inlineCallsInSCC
inlineSCC
inlineCallsInSCC
inlineSCC
inlineCallsInSCC
inlineCall
inlineCall 3
inlineCall 4
inlineCall 5
inlineRegionImpl 1
inlineRegionImpl 2
inlineRegionImpl 3
interface.isLegalToInline:1
isLegalToInline:1
inlineRegionImpl 4
inlineRegionImpl 6
inlineCall 6
inlineCallsInSCC
inlineSCC
inlineCallsInSCC
inlineCall
materializeConversion
materializeConversion 1
materializeCallConversion
materializeConversion 2
inlineCall 3
inlineCall 4
inlineCall 5
inlineRegionImpl 1
inlineRegionImpl 2
inlineRegionImpl 3
interface.isLegalToInline:1
isLegalToInline:1
inlineRegionImpl 4
inlineRegionImpl 6
inlineCall 6
inlineCall
materializeConversion
materializeConversion 1
materializeCallConversion
materializeConversion 2
inlineCall 3
inlineCall 4
inlineCall 5
inlineRegionImpl 1
inlineRegionImpl 2
inlineRegionImpl 3
interface.isLegalToInline:1
isLegalToInline:1
inlineRegionImpl 4
inlineRegionImpl 6
inlineCall 6
inlineCall
materializeConversion
materializeConversion 1
materializeCallConversion
materializeConversion 2
inlineCall 3
inlineCall 4
inlineCall 5
inlineRegionImpl 1
inlineRegionImpl 2
inlineRegionImpl 3
interface.isLegalToInline:1
isLegalToInline:1
inlineRegionImpl 4
inlineRegionImpl 6
inlineCall 6
inlineCall
materializeConversion
materializeConversion 1
materializeCallConversion
materializeConversion 2
inlineCall 3
inlineCall 4
inlineCall 5
inlineRegionImpl 1
inlineRegionImpl 2
inlineRegionImpl 3
interface.isLegalToInline:1
isLegalToInline:1
inlineRegionImpl 4
inlineRegionImpl 6
inlineCall 6
CastToNoOp
CastToNoOp
CastToNoOp
CastToNoOp
inlineCallsInSCC
inlineSCC
VVAddDuplicateOperand_to_VSMul
VVAddDuplicateOperand_to_VSMul
inlineCallsInSCC
inlineCall
materializeConversion
materializeConversion 1
materializeCallConversion
materializeConversion 2
inlineCall 3
inlineCall 4
inlineCall 5
inlineRegionImpl 1
inlineRegionImpl 2
inlineRegionImpl 3
interface.isLegalToInline:1
isLegalToInline:1
inlineRegionImpl 4
inlineRegionImpl 6
inlineCall 6
CastToNoOp
VVAddDuplicateOperand_to_VSMul
VVAddDuplicateOperand_to_VSMul
inlineCallsInSCC
inlineSCC
inlineCallsInSCC
CastEliminationPass::runOnOperation
CIMLoweringPass::runOnOperation finish!
VVAddDuplicateOperand_to_VSMul
ExtractAddressComputationPass::runOnOperation
ExtractAddressComputationPass::runOnOperation finish!
run on operation
alloc_op_list.size()=10
error: different memory spaces specified for base memref type 'memref<2x72x16x4x32xi8, {address = 8192 : i64, memory = "global"}>' and subview memref type 'memref<1x?x16x4x32xi8, strided<[147456, 2048, 128, 32, 1], offset: ?>, {address = -1 : i64, memory = "global"}>'
Pass fail.
"builtin.module"() ({
  "func.func"() <{function_type = (i8) -> (), sym_name = "main"}> ({
  ^bb0(%arg0: i8):
    %0 = "arith.constant"() <{value = 1024 : index}> : () -> index
    %1 = "arith.constant"() <{value = 1152 : index}> : () -> index
    %2 = "arith.constant"() <{value = 72 : index}> : () -> index
    %3 = "arith.constant"() <{value = 64 : index}> : () -> index
    %4 = "arith.constant"() <{value = 20 : index}> : () -> index
    %5 = "arith.constant"() <{value = 17 : index}> : () -> index
    %6 = "arith.constant"() <{value = 128 : index}> : () -> index
    %7 = "arith.constant"() <{value = 6 : index}> : () -> index
    %8 = "arith.constant"() <{value = 5 : index}> : () -> index
    %9 = "arith.constant"() <{value = 4 : index}> : () -> index
    %10 = "arith.constant"() <{value = 16 : index}> : () -> index
    %11 = "arith.constant"() <{value = 3 : index}> : () -> index
    %12 = "arith.constant"() <{value = 32 : index}> : () -> index
    %13 = "arith.constant"() <{value = 1 : index}> : () -> index
    %14 = "arith.constant"() <{value = 2 : index}> : () -> index
    %15 = "arith.constant"() <{value = 8 : index}> : () -> index
    %16 = "arith.constant"() <{value = 0 : index}> : () -> index
    %17 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<8x8x128xi8, {address = 0 : i64, memory = "global"}>
    %18 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<2x72x16x4x32xi8, {address = 8192 : i64, memory = "global"}>
    %19 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<6x6x64xi32, {address = 303104 : i64, memory = "global"}>
    %20 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<8x8x128xi8, {address = 0 : i64, memory = "input_memory"}>
    "cim.copy"(%17, %20) : (memref<8x8x128xi8, {address = 0 : i64, memory = "global"}>, memref<8x8x128xi8, {address = 0 : i64, memory = "input_memory"}>) -> ()
    %21 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<6x6x64xi32, {address = 0 : i64, memory = "output_memory"}>
    %22 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<32xi32, {address = 9216 : i64, memory = "output_memory"}>
    %23 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<2x4x128xi8, {address = 0 : i64, memory = "pim_input_reg_buffer"}>
    %24 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1024xi32, {address = 0 : i64, memory = "pim_output_reg_buffer"}>
    %25 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<64x16x4x32xi8, {address = 0 : i64, memory = "macro"}>
    %26 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<4xindex, {address = 8192 : i64, memory = "input_memory"}>
    "cim.special_reg_set"(%16, %15) : (index, index) -> ()
    "cim.special_reg_set"(%14, %15) : (index, index) -> ()
    "cim.special_reg_set"(%13, %12) : (index, index) -> ()
    "cim.special_reg_set"(%11, %10) : (index, index) -> ()
    "cim.special_reg_set"(%9, %9) : (index, index) -> ()
    "cim.special_reg_set"(%8, %12) : (index, index) -> ()
    "cim.special_reg_set"(%7, %6) : (index, index) -> ()
    "cim.special_reg_set"(%10, %12) : (index, index) -> ()
    "cim.special_reg_set"(%5, %12) : (index, index) -> ()
    "cim.special_reg_set"(%4, %12) : (index, index) -> ()
    "scf.for"(%16, %3, %12) ({
    ^bb0(%arg1: index):
      %27 = "arith.divsi"(%arg1, %12) : (index, index) -> index
      "scf.for"(%16, %2, %3) ({
      ^bb0(%arg2: index):
        %28 = "arith.addi"(%arg2, %3) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
        %29 = "arith.minsi"(%28, %2) : (index, index) -> index
        %30 = "arith.subi"(%29, %arg2) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
        %31 = "memref.subview"(%18, %27, %arg2, %30) <{operandSegmentSizes = array<i32: 1, 2, 1, 0>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808, 0, 0, 0>, static_sizes = array<i64: 1, -9223372036854775808, 16, 4, 32>, static_strides = array<i64: 1, 1, 1, 1, 1>}> : (memref<2x72x16x4x32xi8, {address = 8192 : i64, memory = "global"}>, index, index, index) -> memref<1x?x16x4x32xi8, strided<[147456, 2048, 128, 32, 1], offset: ?>, {address = -1 : i64, memory = "global"}>
        %32 = "memref.subview"(%25, %30) <{operandSegmentSizes = array<i32: 1, 0, 1, 0>, static_offsets = array<i64: 0, 0, 0, 0>, static_sizes = array<i64: -9223372036854775808, 16, 4, 32>, static_strides = array<i64: 1, 1, 1, 1>}> : (memref<64x16x4x32xi8, {address = 0 : i64, memory = "macro"}>, index) -> memref<?x16x4x32xi8, strided<[2048, 128, 32, 1]>, {address = -1 : i64, memory = "macro"}>
        "cim.copy"(%31, %32) : (memref<1x?x16x4x32xi8, strided<[147456, 2048, 128, 32, 1], offset: ?>, {address = -1 : i64, memory = "global"}>, memref<?x16x4x32xi8, strided<[2048, 128, 32, 1]>, {address = -1 : i64, memory = "macro"}>) -> ()
        "memref.store"(%13, %26, %16) <{nontemporal = false}> : (index, memref<4xindex, {address = 8192 : i64, memory = "input_memory"}>, index) -> ()
        "scf.for"(%16, %7, %14) ({
        ^bb0(%arg3: index):
          "scf.for"(%16, %7, %14) ({
          ^bb0(%arg4: index):
            %33 = "memref.load"(%26, %16) <{nontemporal = false}> : (memref<4xindex, {address = 8192 : i64, memory = "input_memory"}>, index) -> index
            %34 = "arith.subi"(%13, %33) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
            "memref.store"(%34, %26, %16) <{nontemporal = false}> : (index, memref<4xindex, {address = 8192 : i64, memory = "input_memory"}>, index) -> ()
            %35 = "memref.subview"(%26) <{operandSegmentSizes = array<i32: 1, 0, 0, 0>, static_offsets = array<i64: 1>, static_sizes = array<i64: 1>, static_strides = array<i64: 1>}> : (memref<4xindex, {address = 8192 : i64, memory = "input_memory"}>) -> memref<1xindex, strided<[1], offset: 1>, {address = -1 : i64, memory = "input_memory"}>
            "memref.store"(%16, %35, %16) <{nontemporal = false}> : (index, memref<1xindex, strided<[1], offset: 1>, {address = -1 : i64, memory = "input_memory"}>, index) -> ()
            %36 = "arith.muli"(%arg2, %10) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
            %37 = "arith.addi"(%36, %0) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
            %38 = "arith.minsi"(%37, %1) : (index, index) -> index
            "scf.for"(%36, %38, %6) ({
            ^bb0(%arg6: index):
              %46 = "memref.subview"(%23, %34) <{operandSegmentSizes = array<i32: 1, 1, 0, 0>, static_offsets = array<i64: -9223372036854775808, 0, 0>, static_sizes = array<i64: 1, 1, 128>, static_strides = array<i64: 1, 1, 1>}> : (memref<2x4x128xi8, {address = 0 : i64, memory = "pim_input_reg_buffer"}>, index) -> memref<1x1x128xi8, strided<[512, 128, 1], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
              %47 = "arith.divsi"(%arg6, %6) : (index, index) -> index
              %48 = "arith.divsi"(%47, %11) : (index, index) -> index
              %49 = "arith.remsi"(%47, %11) : (index, index) -> index
              %50 = "arith.addi"(%arg3, %48) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %51 = "arith.addi"(%arg4, %49) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %52 = "arith.remsi"(%arg6, %6) : (index, index) -> index
              %53 = "memref.subview"(%20, %50, %51, %52) <{operandSegmentSizes = array<i32: 1, 3, 0, 0>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808, -9223372036854775808>, static_sizes = array<i64: 1, 1, 128>, static_strides = array<i64: 1, 1, 1>}> : (memref<8x8x128xi8, {address = 0 : i64, memory = "input_memory"}>, index, index, index) -> memref<1x1x128xi8, strided<[1024, 128, 1], offset: ?>, {address = -1 : i64, memory = "input_memory"}>
              "cim.copy"(%53, %46) : (memref<1x1x128xi8, strided<[1024, 128, 1], offset: ?>, {address = -1 : i64, memory = "input_memory"}>, memref<1x1x128xi8, strided<[512, 128, 1], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>) -> ()
              %54 = "memref.subview"(%23, %34) <{operandSegmentSizes = array<i32: 1, 1, 0, 0>, static_offsets = array<i64: -9223372036854775808, 1, 0>, static_sizes = array<i64: 1, 1, 128>, static_strides = array<i64: 1, 1, 1>}> : (memref<2x4x128xi8, {address = 0 : i64, memory = "pim_input_reg_buffer"}>, index) -> memref<1x1x128xi8, strided<[512, 128, 1], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
              %55 = "arith.addi"(%arg4, %13) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %56 = "arith.divsi"(%arg6, %6) : (index, index) -> index
              %57 = "arith.divsi"(%56, %11) : (index, index) -> index
              %58 = "arith.remsi"(%56, %11) : (index, index) -> index
              %59 = "arith.addi"(%arg3, %57) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %60 = "arith.addi"(%55, %58) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %61 = "arith.remsi"(%arg6, %6) : (index, index) -> index
              %62 = "memref.subview"(%20, %59, %60, %61) <{operandSegmentSizes = array<i32: 1, 3, 0, 0>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808, -9223372036854775808>, static_sizes = array<i64: 1, 1, 128>, static_strides = array<i64: 1, 1, 1>}> : (memref<8x8x128xi8, {address = 0 : i64, memory = "input_memory"}>, index, index, index) -> memref<1x1x128xi8, strided<[1024, 128, 1], offset: ?>, {address = -1 : i64, memory = "input_memory"}>
              "cim.copy"(%62, %54) : (memref<1x1x128xi8, strided<[1024, 128, 1], offset: ?>, {address = -1 : i64, memory = "input_memory"}>, memref<1x1x128xi8, strided<[512, 128, 1], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>) -> ()
              %63 = "memref.subview"(%23, %34) <{operandSegmentSizes = array<i32: 1, 1, 0, 0>, static_offsets = array<i64: -9223372036854775808, 2, 0>, static_sizes = array<i64: 1, 1, 128>, static_strides = array<i64: 1, 1, 1>}> : (memref<2x4x128xi8, {address = 0 : i64, memory = "pim_input_reg_buffer"}>, index) -> memref<1x1x128xi8, strided<[512, 128, 1], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
              %64 = "arith.addi"(%arg3, %13) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %65 = "arith.divsi"(%arg6, %6) : (index, index) -> index
              %66 = "arith.divsi"(%65, %11) : (index, index) -> index
              %67 = "arith.remsi"(%65, %11) : (index, index) -> index
              %68 = "arith.addi"(%64, %66) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %69 = "arith.addi"(%arg4, %67) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %70 = "arith.remsi"(%arg6, %6) : (index, index) -> index
              %71 = "memref.subview"(%20, %68, %69, %70) <{operandSegmentSizes = array<i32: 1, 3, 0, 0>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808, -9223372036854775808>, static_sizes = array<i64: 1, 1, 128>, static_strides = array<i64: 1, 1, 1>}> : (memref<8x8x128xi8, {address = 0 : i64, memory = "input_memory"}>, index, index, index) -> memref<1x1x128xi8, strided<[1024, 128, 1], offset: ?>, {address = -1 : i64, memory = "input_memory"}>
              "cim.copy"(%71, %63) : (memref<1x1x128xi8, strided<[1024, 128, 1], offset: ?>, {address = -1 : i64, memory = "input_memory"}>, memref<1x1x128xi8, strided<[512, 128, 1], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>) -> ()
              %72 = "memref.subview"(%23, %34) <{operandSegmentSizes = array<i32: 1, 1, 0, 0>, static_offsets = array<i64: -9223372036854775808, 3, 0>, static_sizes = array<i64: 1, 1, 128>, static_strides = array<i64: 1, 1, 1>}> : (memref<2x4x128xi8, {address = 0 : i64, memory = "pim_input_reg_buffer"}>, index) -> memref<1x1x128xi8, strided<[512, 128, 1], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
              %73 = "arith.addi"(%arg3, %13) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %74 = "arith.addi"(%arg4, %13) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %75 = "arith.divsi"(%arg6, %6) : (index, index) -> index
              %76 = "arith.divsi"(%75, %11) : (index, index) -> index
              %77 = "arith.remsi"(%75, %11) : (index, index) -> index
              %78 = "arith.addi"(%73, %76) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %79 = "arith.addi"(%74, %77) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %80 = "arith.remsi"(%arg6, %6) : (index, index) -> index
              %81 = "memref.subview"(%20, %78, %79, %80) <{operandSegmentSizes = array<i32: 1, 3, 0, 0>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808, -9223372036854775808>, static_sizes = array<i64: 1, 1, 128>, static_strides = array<i64: 1, 1, 1>}> : (memref<8x8x128xi8, {address = 0 : i64, memory = "input_memory"}>, index, index, index) -> memref<1x1x128xi8, strided<[1024, 128, 1], offset: ?>, {address = -1 : i64, memory = "input_memory"}>
              "cim.copy"(%81, %72) : (memref<1x1x128xi8, strided<[1024, 128, 1], offset: ?>, {address = -1 : i64, memory = "input_memory"}>, memref<1x1x128xi8, strided<[512, 128, 1], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>) -> ()
              %82 = "arith.subi"(%1, %arg6) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %83 = "arith.minsi"(%82, %6) : (index, index) -> index
              %84 = "memref.subview"(%26) <{operandSegmentSizes = array<i32: 1, 0, 0, 0>, static_offsets = array<i64: 1>, static_sizes = array<i64: 1>, static_strides = array<i64: 1>}> : (memref<4xindex, {address = 8192 : i64, memory = "input_memory"}>) -> memref<1xindex, strided<[1], offset: 1>, {address = -1 : i64, memory = "input_memory"}>
              %85 = "memref.load"(%84, %16) <{nontemporal = false}> : (memref<1xindex, strided<[1], offset: 1>, {address = -1 : i64, memory = "input_memory"}>, index) -> index
              %86 = "scf.for"(%16, %83, %10, %85) ({
              ^bb0(%arg7: index, %arg8: index):
                %88 = "arith.addi"(%arg7, %10) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
                %89 = "arith.minsi"(%88, %83) : (index, index) -> index
                %90 = "arith.subi"(%89, %arg7) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
                %91 = "memref.subview"(%25, %arg8) <{operandSegmentSizes = array<i32: 1, 1, 0, 0>, static_offsets = array<i64: -9223372036854775808, 0, 0, 0>, static_sizes = array<i64: 1, 16, 4, 32>, static_strides = array<i64: 1, 1, 1, 1>}> : (memref<64x16x4x32xi8, {address = 0 : i64, memory = "macro"}>, index) -> memref<1x16x4x32xi8, strided<[2048, 128, 32, 1], offset: ?>, {address = -1 : i64, memory = "macro"}>
                %92 = "memref.subview"(%23, %34, %arg7, %90) <{operandSegmentSizes = array<i32: 1, 2, 1, 0>, static_offsets = array<i64: -9223372036854775808, 0, -9223372036854775808>, static_sizes = array<i64: 1, 4, -9223372036854775808>, static_strides = array<i64: 1, 1, 1>}> : (memref<2x4x128xi8, {address = 0 : i64, memory = "pim_input_reg_buffer"}>, index, index, index) -> memref<1x4x?xi8, strided<[512, 128, 1], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>
                "cim.cim_compute"(%92, %91, %24) <{bit_sparse_flag = false, value_sparse_flag = false}> : (memref<1x4x?xi8, strided<[512, 128, 1], offset: ?>, {address = -1 : i64, memory = "pim_input_reg_buffer"}>, memref<1x16x4x32xi8, strided<[2048, 128, 32, 1], offset: ?>, {address = -1 : i64, memory = "macro"}>, memref<1024xi32, {address = 0 : i64, memory = "pim_output_reg_buffer"}>) -> ()
                %93 = "arith.addi"(%arg8, %13) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
                "scf.yield"(%93) : (index) -> ()
              }) : (index, index, index, index) -> index
              %87 = "memref.subview"(%26) <{operandSegmentSizes = array<i32: 1, 0, 0, 0>, static_offsets = array<i64: 1>, static_sizes = array<i64: 1>, static_strides = array<i64: 1>}> : (memref<4xindex, {address = 8192 : i64, memory = "input_memory"}>) -> memref<1xindex, strided<[1], offset: 1>, {address = -1 : i64, memory = "input_memory"}>
              "memref.store"(%86, %87, %16) <{nontemporal = false}> : (index, memref<1xindex, strided<[1], offset: 1>, {address = -1 : i64, memory = "input_memory"}>, index) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            "cim.cim_output"(%24) : (memref<1024xi32, {address = 0 : i64, memory = "pim_output_reg_buffer"}>) -> ()
            "scf.for"(%16, %9, %13) ({
            ^bb0(%arg5: index):
              %39 = "arith.muli"(%arg5, %12) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %40 = "memref.subview"(%24, %39) <{operandSegmentSizes = array<i32: 1, 1, 0, 0>, static_offsets = array<i64: -9223372036854775808>, static_sizes = array<i64: 32>, static_strides = array<i64: 1>}> : (memref<1024xi32, {address = 0 : i64, memory = "pim_output_reg_buffer"}>, index) -> memref<32xi32, strided<[1], offset: ?>, {address = -1 : i64, memory = "pim_output_reg_buffer"}>
              %41 = "arith.divsi"(%arg5, %14) : (index, index) -> index
              %42 = "arith.remsi"(%arg5, %14) : (index, index) -> index
              "cim.copy"(%40, %22) : (memref<32xi32, strided<[1], offset: ?>, {address = -1 : i64, memory = "pim_output_reg_buffer"}>, memref<32xi32, {address = 9216 : i64, memory = "output_memory"}>) -> ()
              %43 = "arith.addi"(%arg3, %41) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %44 = "arith.addi"(%arg4, %42) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index
              %45 = "memref.subview"(%21, %43, %44, %arg1) <{operandSegmentSizes = array<i32: 1, 3, 0, 0>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808, -9223372036854775808>, static_sizes = array<i64: 1, 1, 32>, static_strides = array<i64: 1, 1, 1>}> : (memref<6x6x64xi32, {address = 0 : i64, memory = "output_memory"}>, index, index, index) -> memref<1x1x32xi32, strided<[384, 64, 1], offset: ?>, {address = -1 : i64, memory = "output_memory"}>
              "cim.vv_add"(%22, %45, %45) : (memref<32xi32, {address = 9216 : i64, memory = "output_memory"}>, memref<1x1x32xi32, strided<[384, 64, 1], offset: ?>, {address = -1 : i64, memory = "output_memory"}>, memref<1x1x32xi32, strided<[384, 64, 1], offset: ?>, {address = -1 : i64, memory = "output_memory"}>) -> ()
              "scf.yield"() : () -> ()
            }) : (index, index, index) -> ()
            "scf.yield"() : () -> ()
          }) : (index, index, index) -> ()
          "scf.yield"() : () -> ()
        }) : (index, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    "cim.copy"(%21, %19) : (memref<6x6x64xi32, {address = 0 : i64, memory = "output_memory"}>, memref<6x6x64xi32, {address = 303104 : i64, memory = "global"}>) -> ()
    "cim.copy"(%17, %17) : (memref<8x8x128xi8, {address = 0 : i64, memory = "global"}>, memref<8x8x128xi8, {address = 0 : i64, memory = "global"}>) -> ()
    "cim.copy"(%18, %18) : (memref<2x72x16x4x32xi8, {address = 8192 : i64, memory = "global"}>, memref<2x72x16x4x32xi8, {address = 8192 : i64, memory = "global"}>) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()





VVAddOp::getCanonicalizationPatterns
ShapeOp::getCanonicalizationPatterns
CastOp::getCanonicalizationPatterns
VVAddOp::getCanonicalizationPatterns
ShapeOp::getCanonicalizationPatterns
CastOp::getCanonicalizationPatterns
CIMLoweringPass::runOnOperation
getMemoryAddrList
name: macro offset: 0 size: 131072
name: input_memory offset: 131072 size: 65536
name: output_memory offset: 196608 size: 65536
name: pim_input_reg_buffer offset: 262144 size: 1024
name: pim_output_reg_buffer offset: 263168 size: 4096
name: pim_mask_data_reg_buffer offset: 267264 size: 98304
name: pim_meta_data_reg_buffer offset: 365568 size: 16384
name: pim_output_reg_to_output_memory_buffer offset: 381952 size: 128
name: global offset: 382080 size: 16777216
TransOpLowering::matchAndRewrite begin
TransOpLowering::matchAndRewrite
TransOpLowering::matchAndRewrite success
TransOpLowering::matchAndRewrite begin
TransOpLowering::matchAndRewrite
TransOpLowering::matchAndRewrite success
TransOpLowering::matchAndRewrite begin
TransOpLowering::matchAndRewrite
TransOpLowering::matchAndRewrite success
VVAddOpLowering::matchAndRewrite begin
VVAddOpLowering::matchAndRewrite
VVAddOpLowering::matchAndRewrite success
TransOpLowering::matchAndRewrite begin
TransOpLowering::matchAndRewrite
TransOpLowering::matchAndRewrite success
CIMOutputOpLowering::matchAndRewrite begin
CIMOutputOpLowering::matchAndRewrite finish
StoreOpLowering::matchAndRewrite 1
StoreOpLowering::matchAndRewrite 4
StoreOpLowering::matchAndRewrite success
CIMComputeOpLowering::matchAndRewrite 1
CIMComputeOpLowering::matchAndRewrite 2
CIMComputeOpLowering::matchAndRewrite 3
CIMComputeOpLowering::matchAndRewrite 4
CIMComputeOpLowering::matchAndRewrite success
LoadOpLowering::matchAndRewrite 1
LoadOpLowering::matchAndRewrite 4
LoadOpLowering::matchAndRewrite success
TransOpLowering::matchAndRewrite begin
TransOpLowering::matchAndRewrite
TransOpLowering::matchAndRewrite success
TransOpLowering::matchAndRewrite begin
TransOpLowering::matchAndRewrite
TransOpLowering::matchAndRewrite success
TransOpLowering::matchAndRewrite begin
TransOpLowering::matchAndRewrite
TransOpLowering::matchAndRewrite success
TransOpLowering::matchAndRewrite begin
TransOpLowering::matchAndRewrite
TransOpLowering::matchAndRewrite success
StoreOpLowering::matchAndRewrite 1
StoreOpLowering::matchAndRewrite 4
StoreOpLowering::matchAndRewrite success
StoreOpLowering::matchAndRewrite 1
StoreOpLowering::matchAndRewrite 4
StoreOpLowering::matchAndRewrite success
LoadOpLowering::matchAndRewrite 1
LoadOpLowering::matchAndRewrite 4
LoadOpLowering::matchAndRewrite success
StoreOpLowering::matchAndRewrite 1
StoreOpLowering::matchAndRewrite 4
StoreOpLowering::matchAndRewrite success
TransOpLowering::matchAndRewrite begin
TransOpLowering::matchAndRewrite
TransOpLowering::matchAndRewrite success
SpecialRegSetOpLowering begin
SpecialRegSetOpLowering 1
SpecialRegSetOpLowering 2
SpecialRegSetOpLowering::matchAndRewrite success
SpecialRegSetOpLowering begin
SpecialRegSetOpLowering 1
SpecialRegSetOpLowering 2
SpecialRegSetOpLowering::matchAndRewrite success
SpecialRegSetOpLowering begin
SpecialRegSetOpLowering 1
SpecialRegSetOpLowering 2
SpecialRegSetOpLowering::matchAndRewrite success
SpecialRegSetOpLowering begin
SpecialRegSetOpLowering 1
SpecialRegSetOpLowering 2
SpecialRegSetOpLowering::matchAndRewrite success
SpecialRegSetOpLowering begin
SpecialRegSetOpLowering 1
SpecialRegSetOpLowering 2
SpecialRegSetOpLowering::matchAndRewrite success
SpecialRegSetOpLowering begin
SpecialRegSetOpLowering 1
SpecialRegSetOpLowering 2
SpecialRegSetOpLowering::matchAndRewrite success
SpecialRegSetOpLowering begin
SpecialRegSetOpLowering 1
SpecialRegSetOpLowering 2
SpecialRegSetOpLowering::matchAndRewrite success
SpecialRegSetOpLowering begin
SpecialRegSetOpLowering 1
SpecialRegSetOpLowering 2
SpecialRegSetOpLowering::matchAndRewrite success
SpecialRegSetOpLowering begin
SpecialRegSetOpLowering 1
SpecialRegSetOpLowering 2
SpecialRegSetOpLowering::matchAndRewrite success
SpecialRegSetOpLowering begin
SpecialRegSetOpLowering 1
SpecialRegSetOpLowering 2
SpecialRegSetOpLowering::matchAndRewrite success
TransOpLowering::matchAndRewrite begin
TransOpLowering::matchAndRewrite
TransOpLowering::matchAndRewrite success
CIMLoweringPass::runOnOperation finish!
RR2RIPass::runOnOperation
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
RemSIOpConvert::matchAndRewrite begin
RemSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
DivSIOpConvert::matchAndRewrite begin
DivSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
StoreBaseAndOffsetOpConvert::matchAndRewrite begin
StoreBaseAndOffsetOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
DivSIOpConvert::matchAndRewrite begin
DivSIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
SubIOpConvert::matchAndRewrite begin
SubIOpConvert::matchAndRewrite finish
MinSIOpConvert::matchAndRewrite begin
MinSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MinSIOpConvert::matchAndRewrite begin
MinSIOpConvert::matchAndRewrite finish
LoadBaseAndOffsetOpConvert::matchAndRewrite begin
LoadBaseAndOffsetOpConvert::matchAndRewrite 1
LoadBaseAndOffsetOpConvert::matchAndRewrite 2
LoadBaseAndOffsetOpConvert::matchAndRewrite finish
MinSIOpConvert::matchAndRewrite begin
MinSIOpConvert::matchAndRewrite finish
MinSIOpConvert::matchAndRewrite begin
MinSIOpConvert::matchAndRewrite finish
SubIOpConvert::matchAndRewrite begin
SubIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
RemSIOpConvert::matchAndRewrite begin
RemSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
RemSIOpConvert::matchAndRewrite begin
RemSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
DivSIOpConvert::matchAndRewrite begin
DivSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
DivSIOpConvert::matchAndRewrite begin
DivSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
RemSIOpConvert::matchAndRewrite begin
RemSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
RemSIOpConvert::matchAndRewrite begin
RemSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
DivSIOpConvert::matchAndRewrite begin
DivSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
DivSIOpConvert::matchAndRewrite begin
DivSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
RemSIOpConvert::matchAndRewrite begin
RemSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
RemSIOpConvert::matchAndRewrite begin
RemSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
DivSIOpConvert::matchAndRewrite begin
DivSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
DivSIOpConvert::matchAndRewrite begin
DivSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
RemSIOpConvert::matchAndRewrite begin
RemSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
RemSIOpConvert::matchAndRewrite begin
RemSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
DivSIOpConvert::matchAndRewrite begin
DivSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
DivSIOpConvert::matchAndRewrite begin
DivSIOpConvert::matchAndRewrite finish
MinSIOpConvert::matchAndRewrite begin
MinSIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
StoreBaseAndOffsetOpConvert::matchAndRewrite begin
StoreBaseAndOffsetOpConvert::matchAndRewrite finish
StoreBaseAndOffsetOpConvert::matchAndRewrite begin
StoreBaseAndOffsetOpConvert::matchAndRewrite finish
SubIOpConvert::matchAndRewrite begin
SubIOpConvert::matchAndRewrite finish
LoadBaseAndOffsetOpConvert::matchAndRewrite begin
LoadBaseAndOffsetOpConvert::matchAndRewrite 1
LoadBaseAndOffsetOpConvert::matchAndRewrite 2
LoadBaseAndOffsetOpConvert::matchAndRewrite finish
SubIOpConvert::matchAndRewrite begin
SubIOpConvert::matchAndRewrite finish
StoreBaseAndOffsetOpConvert::matchAndRewrite begin
StoreBaseAndOffsetOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
MulIOpConvert::matchAndRewrite begin
MulIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
SubIOpConvert::matchAndRewrite begin
SubIOpConvert::matchAndRewrite finish
MinSIOpConvert::matchAndRewrite begin
MinSIOpConvert::matchAndRewrite finish
SubIOpConvert::matchAndRewrite begin
SubIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
DivSIOpConvert::matchAndRewrite begin
DivSIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite begin
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
SubIOpConvert::matchAndRewrite begin
SubIOpConvert::matchAndRewrite finish
MinSIOpConvert::matchAndRewrite begin
MinSIOpConvert::matchAndRewrite finish
SubIOpConvert::matchAndRewrite begin
SubIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
SubIOpConvert::matchAndRewrite begin
SubIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite begin
AddIOpConvert::matchAndRewrite finish
SubIOpConvert::matchAndRewrite begin
SubIOpConvert::matchAndRewrite finish
TransOpConvert::matchAndRewrite begin
RR2RIPass::runOnOperation finish!
Lower Passes success.
module {
  func.func @main(%arg0: i8) {
    %c205824 = arith.constant 205824 : index
    %c263168 = arith.constant 263168 : index
    %c139264 = arith.constant 139264 : index
    %c1152 = arith.constant 1152 : index
    %c72 = arith.constant 72 : index
    %c64 = arith.constant 64 : index
    %c128 = arith.constant 128 : index
    %c6 = arith.constant 6 : index
    %c4 = arith.constant 4 : index
    %c16 = arith.constant 16 : index
    %c32 = arith.constant 32 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0 = arith.constant 0 : index
    %0 = "cimisa.general_reg_li"() <{value = 382080 : index}> : () -> index
    %1 = "cimisa.general_reg_li"() <{value = 131072 : index}> : () -> index
    %2 = "cimisa.general_reg_li"() <{value = 8192 : index}> : () -> index
    "cimisa.trans"(%0, %1, %2) : (index, index, index) -> ()
    "cimisa.special_reg_li"() <{set_value = 8 : i32, special_reg = 0 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 8 : i32, special_reg = 2 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 32 : i32, special_reg = 1 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 16 : i32, special_reg = 3 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 4 : i32, special_reg = 4 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 32 : i32, special_reg = 5 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 128 : i32, special_reg = 6 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 32 : i32, special_reg = 16 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 32 : i32, special_reg = 17 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 32 : i32, special_reg = 20 : i32}> : () -> ()
    cf.br ^bb1(%c0 : index)
  ^bb1(%3: index):  // 2 preds: ^bb0, ^bb20
    %4 = arith.cmpi slt, %3, %c64 : index
    cf.cond_br %4, ^bb2, ^bb21
  ^bb2:  // pred: ^bb1
    %5 = "cimisa.ri_divsi"(%3) <{constant = 32 : index}> : (index) -> index
    cf.br ^bb3(%c0 : index)
  ^bb3(%6: index):  // 2 preds: ^bb2, ^bb19
    %7 = arith.cmpi slt, %6, %c72 : index
    cf.cond_br %7, ^bb4, ^bb20
  ^bb4:  // pred: ^bb3
    %8 = "cimisa.ri_addi"(%6) <{constant = 64 : index}> : (index) -> index
    %9 = "cimisa.ri_minsi"(%8) <{constant = 72 : index}> : (index) -> index
    %10 = arith.subi %9, %6 : index
    %11 = "cimisa.ri_muli"(%5) <{constant = 72 : index}> : (index) -> index
    %12 = arith.addi %11, %6 : index
    %13 = "cimisa.ri_muli"(%12) <{constant = 2048 : index}> : (index) -> index
    %14 = "cimisa.ri_addi"(%13) <{constant = 390272 : index}> : (index) -> index
    %15 = "cimisa.ri_muli"(%10) <{constant = 2048 : index}> : (index) -> index
    %16 = "cimisa.general_reg_li"() <{value = 0 : index}> : () -> index
    "cimisa.trans"(%14, %16, %15) : (index, index, index) -> ()
    "cimisa.store"(%c139264, %c1) <{constant = 0 : index}> : (index, index) -> ()
    cf.br ^bb5(%c0 : index)
  ^bb5(%17: index):  // 2 preds: ^bb4, ^bb18
    %18 = arith.cmpi slt, %17, %c6 : index
    cf.cond_br %18, ^bb6, ^bb19
  ^bb6:  // pred: ^bb5
    cf.br ^bb7(%c0 : index)
  ^bb7(%19: index):  // 2 preds: ^bb6, ^bb17
    %20 = arith.cmpi slt, %19, %c6 : index
    cf.cond_br %20, ^bb8, ^bb18
  ^bb8:  // pred: ^bb7
    %21 = "cimisa.load"(%c139264) <{constant = 0 : index}> : (index) -> index
    %22 = arith.subi %c1, %21 : index
    "cimisa.store"(%c139264, %22) <{constant = 0 : index}> : (index, index) -> ()
    "cimisa.store"(%c139264, %c0) <{constant = 4 : index}> : (index, index) -> ()
    %23 = "cimisa.ri_muli"(%6) <{constant = 16 : index}> : (index) -> index
    %24 = "cimisa.ri_addi"(%23) <{constant = 1024 : index}> : (index) -> index
    %25 = "cimisa.ri_minsi"(%24) <{constant = 1152 : index}> : (index) -> index
    cf.br ^bb9(%23 : index)
  ^bb9(%26: index):  // 2 preds: ^bb8, ^bb13
    %27 = arith.cmpi slt, %26, %25 : index
    cf.cond_br %27, ^bb10, ^bb14
  ^bb10:  // pred: ^bb9
    %28 = "cimisa.ri_divsi"(%26) <{constant = 128 : index}> : (index) -> index
    %29 = "cimisa.ri_divsi"(%28) <{constant = 3 : index}> : (index) -> index
    %30 = "cimisa.ri_remsi"(%28) <{constant = 3 : index}> : (index) -> index
    %31 = arith.addi %17, %29 : index
    %32 = arith.addi %19, %30 : index
    %33 = "cimisa.ri_remsi"(%26) <{constant = 128 : index}> : (index) -> index
    %34 = "cimisa.ri_muli"(%31) <{constant = 8 : index}> : (index) -> index
    %35 = arith.addi %34, %32 : index
    %36 = "cimisa.ri_muli"(%35) <{constant = 128 : index}> : (index) -> index
    %37 = arith.addi %36, %33 : index
    %38 = "cimisa.ri_addi"(%37) <{constant = 131072 : index}> : (index) -> index
    %39 = "cimisa.ri_muli"(%22) <{constant = 512 : index}> : (index) -> index
    %40 = "cimisa.ri_addi"(%39) <{constant = 262144 : index}> : (index) -> index
    %41 = "cimisa.general_reg_li"() <{value = 128 : index}> : () -> index
    "cimisa.trans"(%38, %40, %41) : (index, index, index) -> ()
    %42 = "cimisa.ri_addi"(%19) <{constant = 1 : index}> : (index) -> index
    %43 = "cimisa.ri_divsi"(%26) <{constant = 128 : index}> : (index) -> index
    %44 = "cimisa.ri_divsi"(%43) <{constant = 3 : index}> : (index) -> index
    %45 = "cimisa.ri_remsi"(%43) <{constant = 3 : index}> : (index) -> index
    %46 = arith.addi %17, %44 : index
    %47 = arith.addi %42, %45 : index
    %48 = "cimisa.ri_remsi"(%26) <{constant = 128 : index}> : (index) -> index
    %49 = "cimisa.ri_muli"(%46) <{constant = 8 : index}> : (index) -> index
    %50 = arith.addi %49, %47 : index
    %51 = "cimisa.ri_muli"(%50) <{constant = 128 : index}> : (index) -> index
    %52 = arith.addi %51, %48 : index
    %53 = "cimisa.ri_addi"(%52) <{constant = 131072 : index}> : (index) -> index
    %54 = "cimisa.ri_muli"(%22) <{constant = 4 : index}> : (index) -> index
    %55 = "cimisa.ri_addi"(%54) <{constant = 1 : index}> : (index) -> index
    %56 = "cimisa.ri_muli"(%55) <{constant = 128 : index}> : (index) -> index
    %57 = "cimisa.ri_addi"(%56) <{constant = 262144 : index}> : (index) -> index
    %58 = "cimisa.general_reg_li"() <{value = 128 : index}> : () -> index
    "cimisa.trans"(%53, %57, %58) : (index, index, index) -> ()
    %59 = "cimisa.ri_addi"(%17) <{constant = 1 : index}> : (index) -> index
    %60 = "cimisa.ri_divsi"(%26) <{constant = 128 : index}> : (index) -> index
    %61 = "cimisa.ri_divsi"(%60) <{constant = 3 : index}> : (index) -> index
    %62 = "cimisa.ri_remsi"(%60) <{constant = 3 : index}> : (index) -> index
    %63 = arith.addi %59, %61 : index
    %64 = arith.addi %19, %62 : index
    %65 = "cimisa.ri_remsi"(%26) <{constant = 128 : index}> : (index) -> index
    %66 = "cimisa.ri_muli"(%63) <{constant = 8 : index}> : (index) -> index
    %67 = arith.addi %66, %64 : index
    %68 = "cimisa.ri_muli"(%67) <{constant = 128 : index}> : (index) -> index
    %69 = arith.addi %68, %65 : index
    %70 = "cimisa.ri_addi"(%69) <{constant = 131072 : index}> : (index) -> index
    %71 = "cimisa.ri_muli"(%22) <{constant = 4 : index}> : (index) -> index
    %72 = "cimisa.ri_addi"(%71) <{constant = 2 : index}> : (index) -> index
    %73 = "cimisa.ri_muli"(%72) <{constant = 128 : index}> : (index) -> index
    %74 = "cimisa.ri_addi"(%73) <{constant = 262144 : index}> : (index) -> index
    %75 = "cimisa.general_reg_li"() <{value = 128 : index}> : () -> index
    "cimisa.trans"(%70, %74, %75) : (index, index, index) -> ()
    %76 = "cimisa.ri_addi"(%17) <{constant = 1 : index}> : (index) -> index
    %77 = "cimisa.ri_addi"(%19) <{constant = 1 : index}> : (index) -> index
    %78 = "cimisa.ri_divsi"(%26) <{constant = 128 : index}> : (index) -> index
    %79 = "cimisa.ri_divsi"(%78) <{constant = 3 : index}> : (index) -> index
    %80 = "cimisa.ri_remsi"(%78) <{constant = 3 : index}> : (index) -> index
    %81 = arith.addi %76, %79 : index
    %82 = arith.addi %77, %80 : index
    %83 = "cimisa.ri_remsi"(%26) <{constant = 128 : index}> : (index) -> index
    %84 = "cimisa.ri_muli"(%81) <{constant = 8 : index}> : (index) -> index
    %85 = arith.addi %84, %82 : index
    %86 = "cimisa.ri_muli"(%85) <{constant = 128 : index}> : (index) -> index
    %87 = arith.addi %86, %83 : index
    %88 = "cimisa.ri_addi"(%87) <{constant = 131072 : index}> : (index) -> index
    %89 = "cimisa.ri_muli"(%22) <{constant = 4 : index}> : (index) -> index
    %90 = "cimisa.ri_addi"(%89) <{constant = 3 : index}> : (index) -> index
    %91 = "cimisa.ri_muli"(%90) <{constant = 128 : index}> : (index) -> index
    %92 = "cimisa.ri_addi"(%91) <{constant = 262144 : index}> : (index) -> index
    %93 = "cimisa.general_reg_li"() <{value = 128 : index}> : () -> index
    "cimisa.trans"(%88, %92, %93) : (index, index, index) -> ()
    %94 = arith.subi %c1152, %26 : index
    %95 = "cimisa.ri_minsi"(%94) <{constant = 128 : index}> : (index) -> index
    %96 = "cimisa.load"(%c139264) <{constant = 4 : index}> : (index) -> index
    cf.br ^bb11(%c0, %96 : index, index)
  ^bb11(%97: index, %98: index):  // 2 preds: ^bb10, ^bb12
    %99 = arith.cmpi slt, %97, %95 : index
    cf.cond_br %99, ^bb12, ^bb13
  ^bb12:  // pred: ^bb11
    %100 = "cimisa.ri_addi"(%97) <{constant = 16 : index}> : (index) -> index
    %101 = arith.minsi %100, %95 : index
    %102 = arith.subi %101, %97 : index
    %103 = "cimisa.ri_muli"(%22) <{constant = 512 : index}> : (index) -> index
    %104 = arith.addi %103, %97 : index
    %105 = "cimisa.ri_addi"(%104) <{constant = 262144 : index}> : (index) -> index
    %106 = "cimisa.ri_muli"(%102) <{constant = 4 : index}> : (index) -> index
    %107 = "cimisa.ri_divsi"(%106) <{constant = 4 : index}> : (index) -> index
    "cimisa.cim_compute"(%105, %c263168, %98, %107) <{acc_flag = true, bit_sparse_flag = false, value_sparse_flag = false}> : (index, index, index, index) -> ()
    %108 = "cimisa.ri_addi"(%98) <{constant = 1 : index}> : (index) -> index
    %109 = arith.addi %97, %c16 : index
    cf.br ^bb11(%109, %108 : index, index)
  ^bb13:  // pred: ^bb11
    "cimisa.store"(%c139264, %98) <{constant = 4 : index}> : (index, index) -> ()
    %110 = arith.addi %26, %c128 : index
    cf.br ^bb9(%110 : index)
  ^bb14:  // pred: ^bb9
    "cimisa.cim_output"(%c263168) : (index) -> ()
    cf.br ^bb15(%c0 : index)
  ^bb15(%111: index):  // 2 preds: ^bb14, ^bb16
    %112 = arith.cmpi slt, %111, %c4 : index
    cf.cond_br %112, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %113 = "cimisa.ri_divsi"(%111) <{constant = 2 : index}> : (index) -> index
    %114 = "cimisa.ri_remsi"(%111) <{constant = 2 : index}> : (index) -> index
    %115 = "cimisa.ri_muli"(%111) <{constant = 128 : index}> : (index) -> index
    %116 = "cimisa.ri_addi"(%115) <{constant = 263168 : index}> : (index) -> index
    %117 = "cimisa.general_reg_li"() <{value = 205824 : index}> : () -> index
    %118 = "cimisa.general_reg_li"() <{value = 128 : index}> : () -> index
    "cimisa.trans"(%116, %117, %118) : (index, index, index) -> ()
    %119 = arith.addi %17, %113 : index
    %120 = arith.addi %19, %114 : index
    %121 = "cimisa.ri_muli"(%119) <{constant = 6 : index}> : (index) -> index
    %122 = arith.addi %121, %120 : index
    %123 = "cimisa.ri_muli"(%122) <{constant = 64 : index}> : (index) -> index
    %124 = arith.addi %123, %3 : index
    %125 = "cimisa.ri_muli"(%124) <{constant = 4 : index}> : (index) -> index
    %126 = "cimisa.ri_addi"(%125) <{constant = 196608 : index}> : (index) -> index
    %127 = "cimisa.ri_muli"(%119) <{constant = 6 : index}> : (index) -> index
    %128 = arith.addi %127, %120 : index
    %129 = "cimisa.ri_muli"(%128) <{constant = 64 : index}> : (index) -> index
    %130 = arith.addi %129, %3 : index
    %131 = "cimisa.ri_muli"(%130) <{constant = 4 : index}> : (index) -> index
    %132 = "cimisa.ri_addi"(%131) <{constant = 196608 : index}> : (index) -> index
    "cimisa.vvadd"(%c205824, %126, %132, %c32) <{lhs_bw = 32 : i8, out_bw = 32 : i8, rhs_bw = 32 : i8}> : (index, index, index, index) -> ()
    %133 = arith.addi %111, %c1 : index
    cf.br ^bb15(%133 : index)
  ^bb17:  // pred: ^bb15
    %134 = arith.addi %19, %c2 : index
    cf.br ^bb7(%134 : index)
  ^bb18:  // pred: ^bb7
    %135 = arith.addi %17, %c2 : index
    cf.br ^bb5(%135 : index)
  ^bb19:  // pred: ^bb5
    %136 = arith.addi %6, %c64 : index
    cf.br ^bb3(%136 : index)
  ^bb20:  // pred: ^bb3
    %137 = arith.addi %3, %c32 : index
    cf.br ^bb1(%137 : index)
  ^bb21:  // pred: ^bb1
    %138 = "cimisa.general_reg_li"() <{value = 196608 : index}> : () -> index
    %139 = "cimisa.general_reg_li"() <{value = 685184 : index}> : () -> index
    %140 = "cimisa.general_reg_li"() <{value = 9216 : index}> : () -> index
    "cimisa.trans"(%138, %139, %140) : (index, index, index) -> ()
    %141 = "cimisa.general_reg_li"() <{value = 382080 : index}> : () -> index
    %142 = "cimisa.general_reg_li"() <{value = 382080 : index}> : () -> index
    %143 = "cimisa.general_reg_li"() <{value = 8192 : index}> : () -> index
    "cimisa.trans"(%141, %142, %143) : (index, index, index) -> ()
    %144 = "cimisa.general_reg_li"() <{value = 390272 : index}> : () -> index
    %145 = "cimisa.general_reg_li"() <{value = 390272 : index}> : () -> index
    %146 = "cimisa.general_reg_li"() <{value = 294912 : index}> : () -> index
    "cimisa.trans"(%144, %145, %146) : (index, index, index) -> ()
    return
  }
}





CIMBranchConvertPass::runOnOperation
CondBranchOpConvert::matchAndRewrite finish!
CondBranchOpConvert::matchAndRewrite finish!
CondBranchOpConvert::matchAndRewrite finish!
CondBranchOpConvert::matchAndRewrite finish!
CondBranchOpConvert::matchAndRewrite finish!
CondBranchOpConvert::matchAndRewrite finish!
CondBranchOpConvert::matchAndRewrite finish!
CIMBranchConvertPass::runOnOperation finish!
CF Convert Passes success.
module {
  func.func @main(%arg0: i8) {
    %c205824 = arith.constant 205824 : index
    %c263168 = arith.constant 263168 : index
    %c139264 = arith.constant 139264 : index
    %c1152 = arith.constant 1152 : index
    %c72 = arith.constant 72 : index
    %c64 = arith.constant 64 : index
    %c128 = arith.constant 128 : index
    %c6 = arith.constant 6 : index
    %c4 = arith.constant 4 : index
    %c16 = arith.constant 16 : index
    %c32 = arith.constant 32 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0 = arith.constant 0 : index
    %0 = "cimisa.general_reg_li"() <{value = 382080 : index}> : () -> index
    %1 = "cimisa.general_reg_li"() <{value = 131072 : index}> : () -> index
    %2 = "cimisa.general_reg_li"() <{value = 8192 : index}> : () -> index
    "cimisa.trans"(%0, %1, %2) : (index, index, index) -> ()
    "cimisa.special_reg_li"() <{set_value = 8 : i32, special_reg = 0 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 8 : i32, special_reg = 2 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 32 : i32, special_reg = 1 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 16 : i32, special_reg = 3 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 4 : i32, special_reg = 4 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 32 : i32, special_reg = 5 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 128 : i32, special_reg = 6 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 32 : i32, special_reg = 16 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 32 : i32, special_reg = 17 : i32}> : () -> ()
    "cimisa.special_reg_li"() <{set_value = 32 : i32, special_reg = 20 : i32}> : () -> ()
    cf.br ^bb1(%c0 : index)
  ^bb1(%3: index):  // 2 preds: ^bb0, ^bb20
    %4 = arith.cmpi slt, %3, %c64 : index
    cf.cond_br %4, ^bb2, ^bb28
  ^bb2:  // pred: ^bb1
    %5 = "cimisa.ri_divsi"(%3) <{constant = 32 : index}> : (index) -> index
    cf.br ^bb3(%c0 : index)
  ^bb3(%6: index):  // 2 preds: ^bb2, ^bb19
    %7 = arith.cmpi slt, %6, %c72 : index
    cf.cond_br %7, ^bb4, ^bb27
  ^bb4:  // pred: ^bb3
    %8 = "cimisa.ri_addi"(%6) <{constant = 64 : index}> : (index) -> index
    %9 = "cimisa.ri_minsi"(%8) <{constant = 72 : index}> : (index) -> index
    %10 = arith.subi %9, %6 : index
    %11 = "cimisa.ri_muli"(%5) <{constant = 72 : index}> : (index) -> index
    %12 = arith.addi %11, %6 : index
    %13 = "cimisa.ri_muli"(%12) <{constant = 2048 : index}> : (index) -> index
    %14 = "cimisa.ri_addi"(%13) <{constant = 390272 : index}> : (index) -> index
    %15 = "cimisa.ri_muli"(%10) <{constant = 2048 : index}> : (index) -> index
    %16 = "cimisa.general_reg_li"() <{value = 0 : index}> : () -> index
    "cimisa.trans"(%14, %16, %15) : (index, index, index) -> ()
    "cimisa.store"(%c139264, %c1) <{constant = 0 : index}> : (index, index) -> ()
    cf.br ^bb5(%c0 : index)
  ^bb5(%17: index):  // 2 preds: ^bb4, ^bb18
    %18 = arith.cmpi slt, %17, %c6 : index
    cf.cond_br %18, ^bb6, ^bb26
  ^bb6:  // pred: ^bb5
    cf.br ^bb7(%c0 : index)
  ^bb7(%19: index):  // 2 preds: ^bb6, ^bb17
    %20 = arith.cmpi slt, %19, %c6 : index
    cf.cond_br %20, ^bb8, ^bb25
  ^bb8:  // pred: ^bb7
    %21 = "cimisa.load"(%c139264) <{constant = 0 : index}> : (index) -> index
    %22 = arith.subi %c1, %21 : index
    "cimisa.store"(%c139264, %22) <{constant = 0 : index}> : (index, index) -> ()
    "cimisa.store"(%c139264, %c0) <{constant = 4 : index}> : (index, index) -> ()
    %23 = "cimisa.ri_muli"(%6) <{constant = 16 : index}> : (index) -> index
    %24 = "cimisa.ri_addi"(%23) <{constant = 1024 : index}> : (index) -> index
    %25 = "cimisa.ri_minsi"(%24) <{constant = 1152 : index}> : (index) -> index
    cf.br ^bb9(%23 : index)
  ^bb9(%26: index):  // 2 preds: ^bb8, ^bb13
    %27 = arith.cmpi slt, %26, %25 : index
    cf.cond_br %27, ^bb10, ^bb24
  ^bb10:  // pred: ^bb9
    %28 = "cimisa.ri_divsi"(%26) <{constant = 128 : index}> : (index) -> index
    %29 = "cimisa.ri_divsi"(%28) <{constant = 3 : index}> : (index) -> index
    %30 = "cimisa.ri_remsi"(%28) <{constant = 3 : index}> : (index) -> index
    %31 = arith.addi %17, %29 : index
    %32 = arith.addi %19, %30 : index
    %33 = "cimisa.ri_remsi"(%26) <{constant = 128 : index}> : (index) -> index
    %34 = "cimisa.ri_muli"(%31) <{constant = 8 : index}> : (index) -> index
    %35 = arith.addi %34, %32 : index
    %36 = "cimisa.ri_muli"(%35) <{constant = 128 : index}> : (index) -> index
    %37 = arith.addi %36, %33 : index
    %38 = "cimisa.ri_addi"(%37) <{constant = 131072 : index}> : (index) -> index
    %39 = "cimisa.ri_muli"(%22) <{constant = 512 : index}> : (index) -> index
    %40 = "cimisa.ri_addi"(%39) <{constant = 262144 : index}> : (index) -> index
    %41 = "cimisa.general_reg_li"() <{value = 128 : index}> : () -> index
    "cimisa.trans"(%38, %40, %41) : (index, index, index) -> ()
    %42 = "cimisa.ri_addi"(%19) <{constant = 1 : index}> : (index) -> index
    %43 = "cimisa.ri_divsi"(%26) <{constant = 128 : index}> : (index) -> index
    %44 = "cimisa.ri_divsi"(%43) <{constant = 3 : index}> : (index) -> index
    %45 = "cimisa.ri_remsi"(%43) <{constant = 3 : index}> : (index) -> index
    %46 = arith.addi %17, %44 : index
    %47 = arith.addi %42, %45 : index
    %48 = "cimisa.ri_remsi"(%26) <{constant = 128 : index}> : (index) -> index
    %49 = "cimisa.ri_muli"(%46) <{constant = 8 : index}> : (index) -> index
    %50 = arith.addi %49, %47 : index
    %51 = "cimisa.ri_muli"(%50) <{constant = 128 : index}> : (index) -> index
    %52 = arith.addi %51, %48 : index
    %53 = "cimisa.ri_addi"(%52) <{constant = 131072 : index}> : (index) -> index
    %54 = "cimisa.ri_muli"(%22) <{constant = 4 : index}> : (index) -> index
    %55 = "cimisa.ri_addi"(%54) <{constant = 1 : index}> : (index) -> index
    %56 = "cimisa.ri_muli"(%55) <{constant = 128 : index}> : (index) -> index
    %57 = "cimisa.ri_addi"(%56) <{constant = 262144 : index}> : (index) -> index
    %58 = "cimisa.general_reg_li"() <{value = 128 : index}> : () -> index
    "cimisa.trans"(%53, %57, %58) : (index, index, index) -> ()
    %59 = "cimisa.ri_addi"(%17) <{constant = 1 : index}> : (index) -> index
    %60 = "cimisa.ri_divsi"(%26) <{constant = 128 : index}> : (index) -> index
    %61 = "cimisa.ri_divsi"(%60) <{constant = 3 : index}> : (index) -> index
    %62 = "cimisa.ri_remsi"(%60) <{constant = 3 : index}> : (index) -> index
    %63 = arith.addi %59, %61 : index
    %64 = arith.addi %19, %62 : index
    %65 = "cimisa.ri_remsi"(%26) <{constant = 128 : index}> : (index) -> index
    %66 = "cimisa.ri_muli"(%63) <{constant = 8 : index}> : (index) -> index
    %67 = arith.addi %66, %64 : index
    %68 = "cimisa.ri_muli"(%67) <{constant = 128 : index}> : (index) -> index
    %69 = arith.addi %68, %65 : index
    %70 = "cimisa.ri_addi"(%69) <{constant = 131072 : index}> : (index) -> index
    %71 = "cimisa.ri_muli"(%22) <{constant = 4 : index}> : (index) -> index
    %72 = "cimisa.ri_addi"(%71) <{constant = 2 : index}> : (index) -> index
    %73 = "cimisa.ri_muli"(%72) <{constant = 128 : index}> : (index) -> index
    %74 = "cimisa.ri_addi"(%73) <{constant = 262144 : index}> : (index) -> index
    %75 = "cimisa.general_reg_li"() <{value = 128 : index}> : () -> index
    "cimisa.trans"(%70, %74, %75) : (index, index, index) -> ()
    %76 = "cimisa.ri_addi"(%17) <{constant = 1 : index}> : (index) -> index
    %77 = "cimisa.ri_addi"(%19) <{constant = 1 : index}> : (index) -> index
    %78 = "cimisa.ri_divsi"(%26) <{constant = 128 : index}> : (index) -> index
    %79 = "cimisa.ri_divsi"(%78) <{constant = 3 : index}> : (index) -> index
    %80 = "cimisa.ri_remsi"(%78) <{constant = 3 : index}> : (index) -> index
    %81 = arith.addi %76, %79 : index
    %82 = arith.addi %77, %80 : index
    %83 = "cimisa.ri_remsi"(%26) <{constant = 128 : index}> : (index) -> index
    %84 = "cimisa.ri_muli"(%81) <{constant = 8 : index}> : (index) -> index
    %85 = arith.addi %84, %82 : index
    %86 = "cimisa.ri_muli"(%85) <{constant = 128 : index}> : (index) -> index
    %87 = arith.addi %86, %83 : index
    %88 = "cimisa.ri_addi"(%87) <{constant = 131072 : index}> : (index) -> index
    %89 = "cimisa.ri_muli"(%22) <{constant = 4 : index}> : (index) -> index
    %90 = "cimisa.ri_addi"(%89) <{constant = 3 : index}> : (index) -> index
    %91 = "cimisa.ri_muli"(%90) <{constant = 128 : index}> : (index) -> index
    %92 = "cimisa.ri_addi"(%91) <{constant = 262144 : index}> : (index) -> index
    %93 = "cimisa.general_reg_li"() <{value = 128 : index}> : () -> index
    "cimisa.trans"(%88, %92, %93) : (index, index, index) -> ()
    %94 = arith.subi %c1152, %26 : index
    %95 = "cimisa.ri_minsi"(%94) <{constant = 128 : index}> : (index) -> index
    %96 = "cimisa.load"(%c139264) <{constant = 4 : index}> : (index) -> index
    cf.br ^bb11(%c0, %96 : index, index)
  ^bb11(%97: index, %98: index):  // 2 preds: ^bb10, ^bb12
    %99 = arith.cmpi slt, %97, %95 : index
    cf.cond_br %99, ^bb12, ^bb23
  ^bb12:  // pred: ^bb11
    %100 = "cimisa.ri_addi"(%97) <{constant = 16 : index}> : (index) -> index
    %101 = arith.minsi %100, %95 : index
    %102 = arith.subi %101, %97 : index
    %103 = "cimisa.ri_muli"(%22) <{constant = 512 : index}> : (index) -> index
    %104 = arith.addi %103, %97 : index
    %105 = "cimisa.ri_addi"(%104) <{constant = 262144 : index}> : (index) -> index
    %106 = "cimisa.ri_muli"(%102) <{constant = 4 : index}> : (index) -> index
    %107 = "cimisa.ri_divsi"(%106) <{constant = 4 : index}> : (index) -> index
    "cimisa.cim_compute"(%105, %c263168, %98, %107) <{acc_flag = true, bit_sparse_flag = false, value_sparse_flag = false}> : (index, index, index, index) -> ()
    %108 = "cimisa.ri_addi"(%98) <{constant = 1 : index}> : (index) -> index
    %109 = arith.addi %97, %c16 : index
    cf.br ^bb11(%109, %108 : index, index)
  ^bb13:  // pred: ^bb23
    "cimisa.store"(%c139264, %98) <{constant = 4 : index}> : (index, index) -> ()
    %110 = arith.addi %26, %c128 : index
    cf.br ^bb9(%110 : index)
  ^bb14:  // pred: ^bb24
    "cimisa.cim_output"(%c263168) : (index) -> ()
    cf.br ^bb15(%c0 : index)
  ^bb15(%111: index):  // 2 preds: ^bb14, ^bb16
    %112 = arith.cmpi slt, %111, %c4 : index
    cf.cond_br %112, ^bb16, ^bb22
  ^bb16:  // pred: ^bb15
    %113 = "cimisa.ri_divsi"(%111) <{constant = 2 : index}> : (index) -> index
    %114 = "cimisa.ri_remsi"(%111) <{constant = 2 : index}> : (index) -> index
    %115 = "cimisa.ri_muli"(%111) <{constant = 128 : index}> : (index) -> index
    %116 = "cimisa.ri_addi"(%115) <{constant = 263168 : index}> : (index) -> index
    %117 = "cimisa.general_reg_li"() <{value = 205824 : index}> : () -> index
    %118 = "cimisa.general_reg_li"() <{value = 128 : index}> : () -> index
    "cimisa.trans"(%116, %117, %118) : (index, index, index) -> ()
    %119 = arith.addi %17, %113 : index
    %120 = arith.addi %19, %114 : index
    %121 = "cimisa.ri_muli"(%119) <{constant = 6 : index}> : (index) -> index
    %122 = arith.addi %121, %120 : index
    %123 = "cimisa.ri_muli"(%122) <{constant = 64 : index}> : (index) -> index
    %124 = arith.addi %123, %3 : index
    %125 = "cimisa.ri_muli"(%124) <{constant = 4 : index}> : (index) -> index
    %126 = "cimisa.ri_addi"(%125) <{constant = 196608 : index}> : (index) -> index
    %127 = "cimisa.ri_muli"(%119) <{constant = 6 : index}> : (index) -> index
    %128 = arith.addi %127, %120 : index
    %129 = "cimisa.ri_muli"(%128) <{constant = 64 : index}> : (index) -> index
    %130 = arith.addi %129, %3 : index
    %131 = "cimisa.ri_muli"(%130) <{constant = 4 : index}> : (index) -> index
    %132 = "cimisa.ri_addi"(%131) <{constant = 196608 : index}> : (index) -> index
    "cimisa.vvadd"(%c205824, %126, %132, %c32) <{lhs_bw = 32 : i8, out_bw = 32 : i8, rhs_bw = 32 : i8}> : (index, index, index, index) -> ()
    %133 = arith.addi %111, %c1 : index
    cf.br ^bb15(%133 : index)
  ^bb17:  // pred: ^bb22
    %134 = arith.addi %19, %c2 : index
    cf.br ^bb7(%134 : index)
  ^bb18:  // pred: ^bb25
    %135 = arith.addi %17, %c2 : index
    cf.br ^bb5(%135 : index)
  ^bb19:  // pred: ^bb26
    %136 = arith.addi %6, %c64 : index
    cf.br ^bb3(%136 : index)
  ^bb20:  // pred: ^bb27
    %137 = arith.addi %3, %c32 : index
    cf.br ^bb1(%137 : index)
  ^bb21:  // pred: ^bb28
    %138 = "cimisa.general_reg_li"() <{value = 196608 : index}> : () -> index
    %139 = "cimisa.general_reg_li"() <{value = 685184 : index}> : () -> index
    %140 = "cimisa.general_reg_li"() <{value = 9216 : index}> : () -> index
    "cimisa.trans"(%138, %139, %140) : (index, index, index) -> ()
    %141 = "cimisa.general_reg_li"() <{value = 382080 : index}> : () -> index
    %142 = "cimisa.general_reg_li"() <{value = 382080 : index}> : () -> index
    %143 = "cimisa.general_reg_li"() <{value = 8192 : index}> : () -> index
    "cimisa.trans"(%141, %142, %143) : (index, index, index) -> ()
    %144 = "cimisa.general_reg_li"() <{value = 390272 : index}> : () -> index
    %145 = "cimisa.general_reg_li"() <{value = 390272 : index}> : () -> index
    %146 = "cimisa.general_reg_li"() <{value = 294912 : index}> : () -> index
    "cimisa.trans"(%144, %145, %146) : (index, index, index) -> ()
    return
  ^bb22:  // pred: ^bb15
    cf.br ^bb17
  ^bb23:  // pred: ^bb11
    cf.br ^bb13
  ^bb24:  // pred: ^bb9
    cf.br ^bb14
  ^bb25:  // pred: ^bb7
    cf.br ^bb18
  ^bb26:  // pred: ^bb5
    cf.br ^bb19
  ^bb27:  // pred: ^bb3
    cf.br ^bb20
  ^bb28:  // pred: ^bb1
    cf.br ^bb21
  }
}





/home/wangyiou/project/cim_compiler_frontend/playground/.result/final_code.json
run on operation
code generation pass!
code generation pass, run on main!
_getRegisterMappingForBlockArgs:9
_getRegisterMappingGeneral finish
getRegisterMapping finish
getRegisterMapping finish!
getBlockList begin
getBlockList end
error: unsupport operator: arith.cmpi
error: unsupport operator: arith.cmpi
error: unsupport operator: arith.cmpi
error: unsupport operator: arith.cmpi
error: unsupport operator: arith.cmpi
error: unsupport operator: arith.cmpi
error: unsupport operator: arith.cmpi
error: unsupport operator: func.return
codegen finish!
[jump]set offset in line 29 to 1
[condbranch]set offset in line 30 to 2
[jump]set offset in line 34 to 1
[condbranch]set offset in line 35 to 2
[jump]set offset in line 49 to 1
[condbranch]set offset in line 50 to 2
[jump]set offset in line 53 to 1
[condbranch]set offset in line 54 to 2
[jump]set offset in line 64 to 1
[condbranch]set offset in line 65 to 2
[jump]set offset in line 142 to 1
[condbranch]set offset in line 143 to 2
[jump]set offset in line 158 to -15
[jump]set offset in line 162 to -97
[jump]set offset in line 165 to 1
[condbranch]set offset in line 166 to 2
[jump]set offset in line 192 to -26
[jump]set offset in line 195 to -141
[jump]set offset in line 198 to -148
[jump]set offset in line 201 to -166
[jump]set offset in line 204 to -174
[jump]set offset in line 167 to 26
[jump]set offset in line 144 to 15
[jump]set offset in line 66 to 97
[jump]set offset in line 55 to 141
[jump]set offset in line 51 to 148
[jump]set offset in line 36 to 166
[jump]set offset in line 31 to 174
fill jump offset finish!
live variable analysis finish!
logical_reg: 0 -> physical_reg: 0
logical_reg: 1 -> physical_reg: 1
logical_reg: 2 -> physical_reg: 2
logical_reg: 3 -> physical_reg: 3
logical_reg: 4 -> physical_reg: 4
logical_reg: 5 -> physical_reg: 5
logical_reg: 6 -> physical_reg: 6
logical_reg: 7 -> physical_reg: 7
logical_reg: 8 -> physical_reg: 8
logical_reg: 9 -> physical_reg: 9
logical_reg: 10 -> physical_reg: 10
logical_reg: 11 -> physical_reg: 11
logical_reg: 12 -> physical_reg: 12
logical_reg: 13 -> physical_reg: 13
logical_reg: 14 -> physical_reg: 14
logical_reg: 15 -> physical_reg: 15
logical_reg: 16 -> physical_reg: 16
logical_reg: 17 -> physical_reg: 17
logical_reg: 18 -> physical_reg: 18
logical_reg: 19 -> physical_reg: 19
logical_reg: 20 -> physical_reg: 20
logical_reg: 21 -> physical_reg: 21
logical_reg: 22 -> physical_reg: 22
logical_reg: 23 -> physical_reg: 23
logical_reg: 24 -> physical_reg: 24
logical_reg: 25 -> physical_reg: 25
logical_reg: 26 -> physical_reg: 23
logical_reg: 27 -> physical_reg: 24
logical_reg: 28 -> physical_reg: 24
logical_reg: 29 -> physical_reg: 24
logical_reg: 30 -> physical_reg: 25
logical_reg: 31 -> physical_reg: 25
logical_reg: 32 -> physical_reg: 25
logical_reg: 33 -> physical_reg: 25
logical_reg: 34 -> physical_reg: 24
logical_reg: 35 -> physical_reg: 26
logical_reg: 36 -> physical_reg: 24
logical_reg: 37 -> physical_reg: 25
logical_reg: 38 -> physical_reg: 24
logical_reg: 39 -> physical_reg: 27
logical_reg: 40 -> physical_reg: 26
logical_reg: 41 -> physical_reg: 24
logical_reg: 42 -> physical_reg: 28
logical_reg: 43 -> physical_reg: 24
logical_reg: 44 -> physical_reg: 28
logical_reg: 45 -> physical_reg: 24
logical_reg: 46 -> physical_reg: 29
logical_reg: 47 -> physical_reg: 28
logical_reg: 48 -> physical_reg: 24
logical_reg: 49 -> physical_reg: 24
logical_reg: 50 -> physical_reg: 24
logical_reg: 51 -> physical_reg: 24
logical_reg: 52 -> physical_reg: 28
logical_reg: 53 -> physical_reg: 28
logical_reg: 54 -> physical_reg: 29
logical_reg: 55 -> physical_reg: 24
logical_reg: 56 -> physical_reg: 28
logical_reg: 57 -> physical_reg: 29
logical_reg: 58 -> physical_reg: 28
logical_reg: 59 -> physical_reg: 29
logical_reg: 60 -> physical_reg: 24
logical_reg: 61 -> physical_reg: 28
logical_reg: 62 -> physical_reg: 29
logical_reg: 63 -> physical_reg: 24
logical_reg: 64 -> physical_reg: 24
logical_reg: 65 -> physical_reg: 24
logical_reg: 66 -> physical_reg: 24
logical_reg: 67 -> physical_reg: 28
logical_reg: 68 -> physical_reg: 28
logical_reg: 69 -> physical_reg: 28
logical_reg: 70 -> physical_reg: 28
logical_reg: 71 -> physical_reg: 29
logical_reg: 72 -> physical_reg: 24
logical_reg: 73 -> physical_reg: 28
logical_reg: 74 -> physical_reg: 29
logical_reg: 75 -> physical_reg: 28
logical_reg: 76 -> physical_reg: 24
logical_reg: 77 -> physical_reg: 28
logical_reg: 78 -> physical_reg: 29
logical_reg: 79 -> physical_reg: 24
logical_reg: 80 -> physical_reg: 24
logical_reg: 81 -> physical_reg: 24
logical_reg: 82 -> physical_reg: 24
logical_reg: 83 -> physical_reg: 24
logical_reg: 84 -> physical_reg: 28
logical_reg: 85 -> physical_reg: 28
logical_reg: 86 -> physical_reg: 28
logical_reg: 87 -> physical_reg: 28
logical_reg: 88 -> physical_reg: 29
logical_reg: 89 -> physical_reg: 24
logical_reg: 90 -> physical_reg: 28
logical_reg: 91 -> physical_reg: 29
logical_reg: 92 -> physical_reg: 30
logical_reg: 93 -> physical_reg: 29
logical_reg: 94 -> physical_reg: 24
logical_reg: 95 -> physical_reg: 28
logical_reg: 96 -> physical_reg: 29
logical_reg: 97 -> physical_reg: 24
logical_reg: 98 -> physical_reg: 24
logical_reg: 99 -> physical_reg: 24
logical_reg: 100 -> physical_reg: 24
logical_reg: 101 -> physical_reg: 24
logical_reg: 102 -> physical_reg: 28
logical_reg: 103 -> physical_reg: 28
logical_reg: 104 -> physical_reg: 28
logical_reg: 105 -> physical_reg: 28
logical_reg: 106 -> physical_reg: 29
logical_reg: 107 -> physical_reg: 24
logical_reg: 108 -> physical_reg: 27
logical_reg: 109 -> physical_reg: 24
logical_reg: 110 -> physical_reg: 24
logical_reg: 111 -> physical_reg: 24
logical_reg: 112 -> physical_reg: 24
logical_reg: 113 -> physical_reg: 28
logical_reg: 114 -> physical_reg: 28
logical_reg: 115 -> physical_reg: 28
logical_reg: 116 -> physical_reg: 24
logical_reg: 117 -> physical_reg: 24
logical_reg: 118 -> physical_reg: 24
logical_reg: 119 -> physical_reg: 28
logical_reg: 120 -> physical_reg: 24
logical_reg: 121 -> physical_reg: 24
logical_reg: 122 -> physical_reg: 25
logical_reg: 123 -> physical_reg: 26
logical_reg: 124 -> physical_reg: 26
logical_reg: 125 -> physical_reg: 27
logical_reg: 126 -> physical_reg: 28
logical_reg: 127 -> physical_reg: 24
logical_reg: 128 -> physical_reg: 25
logical_reg: 129 -> physical_reg: 26
logical_reg: 130 -> physical_reg: 26
logical_reg: 131 -> physical_reg: 26
logical_reg: 132 -> physical_reg: 26
logical_reg: 133 -> physical_reg: 26
logical_reg: 134 -> physical_reg: 26
logical_reg: 135 -> physical_reg: 24
logical_reg: 136 -> physical_reg: 24
logical_reg: 137 -> physical_reg: 24
logical_reg: 138 -> physical_reg: 24
logical_reg: 139 -> physical_reg: 24
logical_reg: 140 -> physical_reg: 24
logical_reg: 141 -> physical_reg: 24
logical_reg: 142 -> physical_reg: 24
logical_reg: 143 -> physical_reg: 24
logical_reg: 144 -> physical_reg: 24
logical_reg: 145 -> physical_reg: 23
logical_reg: 146 -> physical_reg: 1
logical_reg: 147 -> physical_reg: 2
logical_reg: 148 -> physical_reg: 3
logical_reg: 149 -> physical_reg: 1
logical_reg: 150 -> physical_reg: 2
logical_reg: 151 -> physical_reg: 3
logical_reg: 152 -> physical_reg: 1
logical_reg: 153 -> physical_reg: 2
logical_reg:0 begin: 0 end: 0
logical_reg:1 begin: 0 end: 204
logical_reg:2 begin: 0 end: 204
logical_reg:3 begin: 0 end: 204
logical_reg:4 begin: 0 end: 204
logical_reg:5 begin: 0 end: 204
logical_reg:6 begin: 0 end: 204
logical_reg:7 begin: 0 end: 204
logical_reg:8 begin: 0 end: 204
logical_reg:9 begin: 0 end: 204
logical_reg:10 begin: 0 end: 204
logical_reg:11 begin: 0 end: 204
logical_reg:12 begin: 0 end: 204
logical_reg:13 begin: 0 end: 204
logical_reg:14 begin: 0 end: 204
logical_reg:15 begin: 0 end: 204
logical_reg:16 begin: 0 end: 204
logical_reg:17 begin: 0 end: 204
logical_reg:18 begin: 0 end: 204
logical_reg:19 begin: 0 end: 204
logical_reg:20 begin: 0 end: 204
logical_reg:21 begin: 0 end: 204
logical_reg:22 begin: 0 end: 204
logical_reg:23 begin: 14 end: 17
logical_reg:24 begin: 15 end: 17
logical_reg:25 begin: 16 end: 17
logical_reg:26 begin: 32 end: 201
logical_reg:27 begin: 37 end: 38
logical_reg:28 begin: 38 end: 39
logical_reg:29 begin: 39 end: 44
logical_reg:30 begin: 40 end: 41
logical_reg:31 begin: 41 end: 42
logical_reg:32 begin: 42 end: 43
logical_reg:33 begin: 43 end: 46
logical_reg:34 begin: 44 end: 46
logical_reg:35 begin: 45 end: 46
logical_reg:36 begin: 56 end: 57
logical_reg:37 begin: 56 end: 162
logical_reg:38 begin: 60 end: 63
logical_reg:39 begin: 61 end: 62
logical_reg:40 begin: 56 end: 162
logical_reg:41 begin: 67 end: 69
logical_reg:42 begin: 68 end: 70
logical_reg:43 begin: 69 end: 71
logical_reg:44 begin: 70 end: 73
logical_reg:45 begin: 71 end: 74
logical_reg:46 begin: 72 end: 76
logical_reg:47 begin: 73 end: 74
logical_reg:48 begin: 74 end: 75
logical_reg:49 begin: 75 end: 76
logical_reg:50 begin: 76 end: 77
logical_reg:51 begin: 77 end: 81
logical_reg:52 begin: 78 end: 79
logical_reg:53 begin: 79 end: 81
logical_reg:54 begin: 80 end: 81
logical_reg:55 begin: 82 end: 87
logical_reg:56 begin: 83 end: 85
logical_reg:57 begin: 84 end: 86
logical_reg:58 begin: 85 end: 87
logical_reg:59 begin: 86 end: 89
logical_reg:60 begin: 87 end: 90
logical_reg:61 begin: 88 end: 92
logical_reg:62 begin: 89 end: 90
logical_reg:63 begin: 90 end: 91
logical_reg:64 begin: 91 end: 92
logical_reg:65 begin: 92 end: 93
logical_reg:66 begin: 93 end: 99
logical_reg:67 begin: 94 end: 95
logical_reg:68 begin: 95 end: 96
logical_reg:69 begin: 96 end: 97
logical_reg:70 begin: 97 end: 99
logical_reg:71 begin: 98 end: 99
logical_reg:72 begin: 100 end: 104
logical_reg:73 begin: 101 end: 103
logical_reg:74 begin: 102 end: 104
logical_reg:75 begin: 103 end: 105
logical_reg:76 begin: 104 end: 107
logical_reg:77 begin: 105 end: 108
logical_reg:78 begin: 106 end: 110
logical_reg:79 begin: 107 end: 108
logical_reg:80 begin: 108 end: 109
logical_reg:81 begin: 109 end: 110
logical_reg:82 begin: 110 end: 111
logical_reg:83 begin: 111 end: 117
logical_reg:84 begin: 112 end: 113
logical_reg:85 begin: 113 end: 114
logical_reg:86 begin: 114 end: 115
logical_reg:87 begin: 115 end: 117
logical_reg:88 begin: 116 end: 117
logical_reg:89 begin: 118 end: 123
logical_reg:90 begin: 119 end: 124
logical_reg:91 begin: 120 end: 122
logical_reg:92 begin: 121 end: 123
logical_reg:93 begin: 122 end: 124
logical_reg:94 begin: 123 end: 126
logical_reg:95 begin: 124 end: 127
logical_reg:96 begin: 125 end: 129
logical_reg:97 begin: 126 end: 127
logical_reg:98 begin: 127 end: 128
logical_reg:99 begin: 128 end: 129
logical_reg:100 begin: 129 end: 130
logical_reg:101 begin: 130 end: 136
logical_reg:102 begin: 131 end: 132
logical_reg:103 begin: 132 end: 133
logical_reg:104 begin: 133 end: 134
logical_reg:105 begin: 134 end: 136
logical_reg:106 begin: 135 end: 136
logical_reg:107 begin: 137 end: 138
logical_reg:108 begin: 67 end: 158
logical_reg:109 begin: 139 end: 141
logical_reg:110 begin: 145 end: 146
logical_reg:111 begin: 146 end: 147
logical_reg:112 begin: 147 end: 151
logical_reg:113 begin: 148 end: 149
logical_reg:114 begin: 149 end: 150
logical_reg:115 begin: 150 end: 153
logical_reg:116 begin: 151 end: 152
logical_reg:117 begin: 152 end: 153
logical_reg:118 begin: 154 end: 157
logical_reg:119 begin: 155 end: 156
logical_reg:120 begin: 160 end: 161
logical_reg:121 begin: 168 end: 175
logical_reg:122 begin: 169 end: 176
logical_reg:123 begin: 170 end: 171
logical_reg:124 begin: 171 end: 174
logical_reg:125 begin: 172 end: 174
logical_reg:126 begin: 173 end: 174
logical_reg:127 begin: 175 end: 183
logical_reg:128 begin: 176 end: 184
logical_reg:129 begin: 177 end: 178
logical_reg:130 begin: 178 end: 179
logical_reg:131 begin: 179 end: 180
logical_reg:132 begin: 180 end: 181
logical_reg:133 begin: 181 end: 182
logical_reg:134 begin: 182 end: 189
logical_reg:135 begin: 183 end: 184
logical_reg:136 begin: 184 end: 185
logical_reg:137 begin: 185 end: 186
logical_reg:138 begin: 186 end: 187
logical_reg:139 begin: 187 end: 188
logical_reg:140 begin: 188 end: 189
logical_reg:141 begin: 190 end: 191
logical_reg:142 begin: 193 end: 194
logical_reg:143 begin: 196 end: 197
logical_reg:144 begin: 199 end: 200
logical_reg:145 begin: 202 end: 203
logical_reg:146 begin: 205 end: 208
logical_reg:147 begin: 206 end: 208
logical_reg:148 begin: 207 end: 208
logical_reg:149 begin: 209 end: 212
logical_reg:150 begin: 210 end: 212
logical_reg:151 begin: 211 end: 212
logical_reg:152 begin: 213 end: 216
logical_reg:153 begin: 214 end: 216
Generated code was saved to /home/wangyiou/project/cim_compiler_frontend/playground/.result/final_code.json
CodeGen Passes success.
